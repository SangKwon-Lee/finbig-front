{"version":3,"sources":["components/mypage/download/MypageDownload.style.tsx","components/mypage/download/MypageDownload.presenter.tsx","components/mypage/download/MypageDownload.query.ts","components/mypage/download/MypageDownload.container.tsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/@babel/runtime/regenerator/index.js","components/login/Login.query.ts","../../../../src/react/hooks/useMutation.ts","../../../../src/react/hooks/useQuery.ts","components/common/hocs/withAuth.tsx","components/common/layout/mypage/MypageLayout.style.ts","components/common/layout/mypage/MypageLayout.presenter.tsx","components/common/layout/mypage/MypageLayout.container.tsx","utils/blankImg.ts","components/mypage/recent/MypageRecent.style.ts"],"names":["MypageDownloadWrapper","styled","div","MypageBody","MypageDownloadPresenter","data","blackLength","navigate","useNavigate","menu","finbigDownload","length","map","src","String","thumbnail","onClick","id","title","description","isBest","Array","fill","__","index","style","border","FETCH_USER_DOWNLOAD","gql","WithAuth","userId","sessionStorage","getItem","useState","setBlackLength","useQuery","variables","fetchPolicy","useEffect","user","blankImg","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","module","exports","LOGIN","CREATE_TOKEN","FETCH_TOKEN","UPDATE_TOKEN","DELETE_TOKEN","FETCH_USER","UPDATE_IS_SUBSCRIPTION_USER","useMutation","mutation","options","client","Mutation","called","loading","result","setResult","ref","mutationId","isMounted","Object","assign","current","execute","executeOptions","baseOptions","ignoreResults","clientOptions","mutate","response","errors","graphQLErrors","onCompleted","catch","onError","reset","query","context","defaultWatchQueryOptions","defaultOptions","watchQuery","Query","partial","watchQueryOptions","createWatchQueryOptions","obsQuery","renderPromises","getSSRObservable","registerSSRObservable","ssr","skip","getCurrentResult","addQueryPromise","getOptions","fetchData","sub","subscribe","next","unsubscribe","complete","setObsQuery","previousData","nextResult","setOptions","previousResult","subscription","onNext","last","resetLastResults","hasOwnProperty","networkStatus","disableNetworkFetches","partialRefetch","keys","refetch","ready","obsQueryFields","bind","fetchMore","updateQuery","startPolling","stopPolling","subscribeToMore","otherOptions","Component","props","fetchToken","token","handleTokenCheck","a","alert","MypageMenuWrapper","MypageTitle","MypageBtn","button","MypageLayoutPresenter","borderBottom","MypageLayoutContainer","MypageRecentWrapper","MypageBodyColumn","MypageRecentListText","MypageRecentListNumber","span","MypageDataListWrapper","MypageDataWrapper","MypageDataThumbnail","img","MypageDataTitle","MypageDataDescription","MypageDataBtnWrapper","MypageDataBestBtn","MypageDataUpdateBtn","DataListImgBlank"],"mappings":"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","file":"static/js/16.97ec84a9.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const MypageDownloadWrapper = styled.div`\n  max-width: 1920px;\n  min-width: 1100px;\n  width: 100%;\n  padding-top: 58px;\n  display: flex;\n  justify-content: center;\n  padding-bottom: 110px;\n`;\n\nexport const MypageBody = styled.div`\n  display: flex;\n  width: 1100px;\n  justify-content: space-between;\n`;\n","import { useNavigate } from \"react-router\";\nimport {\n  Maybe,\n  UsersPermissionsUser,\n} from \"../../../commons/types/generated/types\";\nimport MypageLayoutContainer from \"../../common/layout/mypage/MypageLayout.container\";\nimport {\n  MypageRecentListText,\n  MypageBodyColumn,\n  MypageRecentListNumber,\n  MypageDataListWrapper,\n  MypageDataWrapper,\n  MypageDataThumbnail,\n  MypageDataTitle,\n  MypageDataDescription,\n  MypageDataBtnWrapper,\n  MypageDataBestBtn,\n  MypageDataUpdateBtn,\n  DataListImgBlank,\n} from \"../recent/MypageRecent.style\";\nimport { MypageBody, MypageDownloadWrapper } from \"./MypageDownload.style\";\n\ninterface MypageDownloadProps {\n  data?: Maybe<UsersPermissionsUser> | undefined;\n  blackLength: number;\n}\n\nconst MypageDownloadPresenter: React.FC<MypageDownloadProps> = ({\n  data,\n  blackLength,\n}) => {\n  const navigate = useNavigate();\n  return (\n    <MypageDownloadWrapper>\n      <MypageBody>\n        <MypageLayoutContainer menu=\"download\" />\n        <MypageBodyColumn>\n          <MypageRecentListText>\n            상품이 모두\n            <MypageRecentListNumber>\n              &nbsp; {data?.finbigDownload?.length}\n            </MypageRecentListNumber>\n            개 있습니다\n          </MypageRecentListText>\n          <MypageDataListWrapper>\n            {data &&\n              data?.finbigDownload?.map((data) => (\n                <MypageDataWrapper key={data?.id}>\n                  <MypageDataThumbnail\n                    src={String(data?.thumbnail)}\n                    onClick={() => {\n                      navigate(`/data/${data?.id}`);\n                    }}\n                  />\n                  <MypageDataTitle\n                    onClick={() => {\n                      navigate(`/data/${data?.id}`);\n                    }}\n                  >\n                    {data?.title}\n                  </MypageDataTitle>\n                  <MypageDataDescription\n                    onClick={() => {\n                      navigate(`/data/${data?.id}`);\n                    }}\n                  >\n                    {data?.description}\n                  </MypageDataDescription>\n                  <MypageDataBtnWrapper>\n                    {data?.isBest && (\n                      <MypageDataBestBtn>Best</MypageDataBestBtn>\n                    )}\n                    <MypageDataUpdateBtn>Update</MypageDataUpdateBtn>\n                  </MypageDataBtnWrapper>\n                </MypageDataWrapper>\n              ))}\n            {new Array(3 - blackLength).fill(1).map((__, index) => (\n              <DataListImgBlank\n                key={index}\n                style={{ border: \"none\" }}\n              ></DataListImgBlank>\n            ))}\n          </MypageDataListWrapper>\n        </MypageBodyColumn>\n      </MypageBody>\n    </MypageDownloadWrapper>\n  );\n};\n\nexport default MypageDownloadPresenter;\n","import { gql } from \"@apollo/client\";\n\nexport const FETCH_USER_DOWNLOAD = gql`\n  query user($id: ID!) {\n    user(id: $id) {\n      finbigDownload {\n        id\n        title\n        description\n        thumbnail\n        isBest\n      }\n    }\n  }\n`;\n","import { useEffect, useState } from \"react\";\nimport { Query, QueryUserArgs } from \"../../../commons/types/generated/types\";\nimport { blankImg } from \"../../../utils/blankImg\";\nimport WithAuth from \"../../common/hocs/withAuth\";\nimport MypageDownloadPresenter from \"./MypageDownload.presenter\";\nimport { useQuery } from \"@apollo/client\";\nimport { FETCH_USER_DOWNLOAD } from \"./MypageDownload.query\";\n\nconst MypageDownloadContainer = () => {\n  const userId = sessionStorage.getItem(\"userId\");\n\n  //* 빈 이미지\n  const [blackLength, setBlackLength] = useState<number>(1);\n\n  const { data } = useQuery<Query, QueryUserArgs>(FETCH_USER_DOWNLOAD, {\n    variables: {\n      id: String(userId),\n    },\n    fetchPolicy: \"no-cache\",\n  });\n\n  useEffect(() => {\n    if (data?.user?.finbigDownload?.length) {\n      setBlackLength(blankImg(data?.user?.finbigDownload.length));\n    }\n  }, [data]);\n\n  return (\n    <MypageDownloadPresenter data={data?.user} blackLength={blackLength} />\n  );\n};\n\nexport default WithAuth(MypageDownloadContainer);\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","module.exports = require(\"regenerator-runtime\");\n","import { gql } from \"@apollo/client\";\n\nexport const LOGIN = gql`\n  mutation Login($input: UsersPermissionsLoginInput!) {\n    login(input: $input) {\n      jwt\n      user {\n        id\n        email\n        confirmed\n        blocked\n        role {\n          id\n          name\n          description\n          type\n        }\n      }\n    }\n  }\n`;\n\nexport const CREATE_TOKEN = gql`\n  mutation createToken($input: createTokenInput!) {\n    createToken(input: $input) {\n      token {\n        id\n      }\n    }\n  }\n`;\n\nexport const FETCH_TOKEN = gql`\n  mutation fetchToken($userId: String, $token: String) {\n    fetchToken(userId: $userId, token: $token) {\n      id\n      token\n      userId\n    }\n  }\n`;\n\nexport const UPDATE_TOKEN = gql`\n  mutation updateToken($input: updateTokenInput) {\n    updateToken(input: $input) {\n      token {\n        id\n      }\n    }\n  }\n`;\n\nexport const DELETE_TOKEN = gql`\n  mutation deleteToken($input: deleteTokenInput) {\n    deleteToken(input: $input) {\n      token {\n        id\n      }\n    }\n  }\n`;\n\nexport const FETCH_USER = gql`\n  query user($id: ID!) {\n    user(id: $id) {\n      isDeleted\n      username\n      email\n      name\n      phone\n      isSubscribe\n      expirationDate\n    }\n  }\n`;\n\nexport const UPDATE_IS_SUBSCRIPTION_USER = gql`\n  mutation updateUser($input: updateUserInput) {\n    updateUser(input: $input) {\n      user {\n        id\n      }\n    }\n  }\n`;\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n} from '../types/types';\n\nimport {\n  ApolloCache,\n  DefaultContext,\n  mergeOptions,\n  OperationVariables,\n} from '../../core';\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>,\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = useState<Omit<MutationResult, 'reset'>>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  // TODO: Trying to assign these in a useEffect or useLayoutEffect breaks\n  // higher-order components.\n  {\n    Object.assign(ref.current, { client, options, mutation });\n  }\n\n  const execute = useCallback((\n    executeOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {}\n  ) => {\n    const {client, options, mutation} = ref.current;\n    const baseOptions = { ...options, mutation };\n    if (!ref.current.result.loading && !baseOptions.ignoreResults) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client,\n      });\n    }\n\n    const mutationId = ++ref.current.mutationId;\n    const clientOptions = mergeOptions(\n      baseOptions,\n      executeOptions as any,\n    );\n\n    return client.mutate(clientOptions).then((response) => {\n      const { data, errors } = response;\n      const error =\n        errors && errors.length > 0\n          ? new ApolloError({ graphQLErrors: errors })\n          : void 0;\n\n      if (\n        mutationId === ref.current.mutationId &&\n        !clientOptions.ignoreResults\n      ) {\n        const result = {\n          called: true,\n          loading: false,\n          data,\n          error,\n          client,\n        };\n\n        if (ref.current.isMounted && !equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      baseOptions.onCompleted?.(response.data!);\n      executeOptions.onCompleted?.(response.data!);\n      return response;\n    }).catch((error) => {\n      if (\n        mutationId === ref.current.mutationId &&\n        ref.current.isMounted\n      ) {\n        const result = {\n          loading: false,\n          error,\n          data: void 0,\n          called: true,\n          client,\n        };\n\n        if (!equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      if (baseOptions.onError || clientOptions.onError) {\n        baseOptions.onError?.(error);\n        executeOptions.onError?.(error);\n        // TODO(brian): why are we returning this here???\n        return { data: void 0, errors: error };\n      }\n\n      throw error;\n    });\n  }, []);\n\n  const reset = useCallback(() => {\n    setResult({ called: false, loading: false, client });\n  }, []);\n\n  useEffect(() => () => {\n    ref.current.isMounted = false;\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n","import { useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { equal } from '@wry/equality';\nimport { OperationVariables, mergeOptions } from '../../core';\nimport { getApolloContext } from '../context';\nimport { ApolloError } from '../../errors';\nimport {\n  ApolloQueryResult,\n  NetworkStatus,\n  ObservableQuery,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from '../../core';\nimport {\n  QueryHookOptions,\n  QueryResult,\n} from '../types/types';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useQuery<\n  TData = any,\n  TVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>,\n): QueryResult<TData, TVariables> {\n  const context = useContext(getApolloContext());\n  const client = useApolloClient(options?.client);\n  const defaultWatchQueryOptions = client.defaultOptions.watchQuery;\n  verifyDocumentType(query, DocumentType.Query);\n  const [obsQuery, setObsQuery] = useState(() => {\n    const watchQueryOptions = createWatchQueryOptions(query, options, defaultWatchQueryOptions);\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    let obsQuery: ObservableQuery<TData, TVariables> | null = null;\n    if (context.renderPromises) {\n      obsQuery = context.renderPromises.getSSRObservable(watchQueryOptions);\n    }\n\n    if (!obsQuery) {\n      // Is it safe (StrictMode/memory-wise) to call client.watchQuery here?\n      obsQuery = client.watchQuery(watchQueryOptions);\n      if (context.renderPromises) {\n        context.renderPromises.registerSSRObservable(\n          obsQuery,\n          watchQueryOptions,\n        );\n      }\n    }\n\n    if (\n      context.renderPromises &&\n      options?.ssr !== false &&\n      !options?.skip &&\n      obsQuery.getCurrentResult().loading\n    ) {\n      // TODO: This is a legacy API which could probably be cleaned up\n      context.renderPromises.addQueryPromise(\n        {\n          // The only options which seem to actually be used by the\n          // RenderPromises class are query and variables.\n          getOptions: () => createWatchQueryOptions(query, options, defaultWatchQueryOptions),\n          fetchData: () => new Promise<void>((resolve) => {\n            const sub = obsQuery!.subscribe({\n              next(result) {\n                if (!result.loading) {\n                  resolve()\n                  sub.unsubscribe();\n                }\n              },\n              error() {\n                resolve();\n                sub.unsubscribe();\n              },\n              complete() {\n                resolve();\n              },\n            });\n          }),\n        },\n        // This callback never seemed to do anything\n        () => null,\n      );\n    }\n\n    return obsQuery;\n  });\n\n  let [result, setResult] = useState(() => {\n    const result = obsQuery.getCurrentResult();\n    if (!result.loading && options) {\n      if (result.error) {\n        options.onError?.(result.error);\n      } else if (result.data) {\n        options.onCompleted?.(result.data);\n      }\n    }\n\n    return result;\n  });\n\n  const ref = useRef({\n    client,\n    query,\n    options,\n    result,\n    previousData: void 0 as TData | undefined,\n    watchQueryOptions: createWatchQueryOptions(query, options, defaultWatchQueryOptions),\n  });\n\n  // An effect to recreate the obsQuery whenever the client or query changes.\n  // This effect is also responsible for checking and updating the obsQuery\n  // options whenever they change.\n  useEffect(() => {\n    const watchQueryOptions = createWatchQueryOptions(query, options, defaultWatchQueryOptions);\n    let nextResult: ApolloQueryResult<TData> | undefined;\n    if (ref.current.client !== client || !equal(ref.current.query, query)) {\n      const obsQuery = client.watchQuery(watchQueryOptions);\n      setObsQuery(obsQuery);\n      nextResult = obsQuery.getCurrentResult();\n    } else if (!equal(ref.current.watchQueryOptions, watchQueryOptions)) {\n      obsQuery.setOptions(watchQueryOptions).catch(() => {});\n      nextResult = obsQuery.getCurrentResult();\n      ref.current.watchQueryOptions = watchQueryOptions;\n    }\n\n    if (nextResult) {\n      const previousResult = ref.current.result;\n      if (previousResult.data) {\n        ref.current.previousData = previousResult.data;\n      }\n\n      setResult(ref.current.result = nextResult);\n      if (!nextResult.loading && options) {\n        if (nextResult.error) {\n          options.onError?.(nextResult.error);\n        } else if (nextResult.data) {\n          options.onCompleted?.(nextResult.data);\n        }\n      }\n    }\n\n    Object.assign(ref.current, { client, query });\n  }, [obsQuery, client, query, options]);\n\n  // An effect to subscribe to the current observable query\n  useEffect(() => {\n    if (context.renderPromises) {\n      return;\n    }\n\n    let subscription = obsQuery.subscribe(onNext, onError);\n    // We use `getCurrentResult()` instead of the callback argument because\n    // the values differ slightly. Specifically, loading results will have\n    // an empty object for data instead of `undefined` for some reason.\n    function onNext() {\n      const previousResult = ref.current.result;\n      const result = obsQuery.getCurrentResult();\n      // Make sure we're not attempting to re-render similar results\n      if (\n        previousResult &&\n        previousResult.loading === result.loading &&\n        previousResult.networkStatus === result.networkStatus &&\n        equal(previousResult.data, result.data)\n      ) {\n        return;\n      }\n\n      if (previousResult.data) {\n        ref.current.previousData = previousResult.data;\n      }\n\n      setResult(ref.current.result = result);\n      if (!result.loading) {\n        ref.current.options?.onCompleted?.(result.data);\n      }\n    }\n\n    function onError(error: Error) {\n      const last = obsQuery[\"last\"];\n      subscription.unsubscribe();\n      // Unfortunately, if `lastError` is set in the current\n      // `observableQuery` when the subscription is re-created,\n      // the subscription will immediately receive the error, which will\n      // cause it to terminate again. To avoid this, we first clear\n      // the last error/result from the `observableQuery` before re-starting\n      // the subscription, and restore it afterwards (so the subscription\n      // has a chance to stay open).\n      try {\n        obsQuery.resetLastResults();\n        subscription = obsQuery.subscribe(onNext, onError);\n      } finally {\n        obsQuery[\"last\"] = last;\n      }\n\n      if (!error.hasOwnProperty('graphQLErrors')) {\n        // The error is not a GraphQL error\n        throw error;\n      }\n\n      const previousResult = ref.current.result;\n      if (\n        (previousResult && previousResult.loading) ||\n        !equal(error, previousResult.error)\n      ) {\n        setResult(ref.current.result = {\n          data: previousResult.data,\n          error: error as ApolloError,\n          loading: false,\n          networkStatus: NetworkStatus.error,\n        });\n        ref.current.options?.onError?.(error as ApolloError);\n      }\n    }\n\n    return () => subscription.unsubscribe();\n  }, [obsQuery, context.renderPromises, client.disableNetworkFetches]);\n\n  let partial: boolean | undefined;\n  ({ partial, ...result } = result);\n\n  {\n    // BAD BOY CODE BLOCK WHERE WE PUT SIDE-EFFECTS IN THE RENDER FUNCTION\n    //\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (\n      partial &&\n      options?.partialRefetch &&\n      !result.loading &&\n      (!result.data || Object.keys(result.data).length === 0) &&\n      obsQuery.options.fetchPolicy !== 'cache-only'\n    ) {\n      result = {\n        ...result,\n        loading: true,\n        networkStatus: NetworkStatus.refetch,\n      };\n\n      obsQuery.refetch();\n    }\n\n    // TODO: This is a hack to make sure useLazyQuery executions update the\n    // obsevable query options for ssr.\n    if (\n      context.renderPromises &&\n      options?.ssr !== false &&\n      !options?.skip &&\n      result.loading\n    ) {\n      obsQuery.setOptions(createWatchQueryOptions(query, options, defaultWatchQueryOptions)).catch(() => {});\n    }\n\n    // We assign options during rendering as a guard to make sure that\n    // callbacks like onCompleted and onError are not stale.\n    Object.assign(ref.current, { options });\n  }\n\n  if (\n    (context.renderPromises || client.disableNetworkFetches) &&\n    options?.ssr === false\n  ) {\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    result = ref.current.result = {\n      loading: true,\n      data: void 0 as unknown as TData,\n      error: void 0,\n      networkStatus: NetworkStatus.loading,\n    };\n  } else if (options?.skip || options?.fetchPolicy === 'standby') {\n    // When skipping a query (ie. we're not querying for data but still want to\n    // render children), make sure the `data` is cleared out and `loading` is\n    // set to `false` (since we aren't loading anything).\n    //\n    // NOTE: We no longer think this is the correct behavior. Skipping should\n    // not automatically set `data` to `undefined`, but instead leave the\n    // previous data in place. In other words, skipping should not mandate that\n    // previously received data is all of a sudden removed. Unfortunately,\n    // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n    // to address this.\n    result = {\n      loading: false,\n      data: void 0 as unknown as TData,\n      error: void 0,\n      networkStatus: NetworkStatus.ready,\n    };\n  }\n\n  if (result.errors && result.errors.length) {\n    // Until a set naming convention for networkError and graphQLErrors is\n    // decided upon, we map errors (graphQLErrors) to the error options.\n    // TODO: Is it possible for both result.error and result.errors to be\n    // defined here?\n    result = {\n      ...result,\n      error: result.error || new ApolloError({ graphQLErrors: result.errors }),\n    };\n  }\n\n  const obsQueryFields = useMemo(() => ({\n    refetch: obsQuery.refetch.bind(obsQuery),\n    fetchMore: obsQuery.fetchMore.bind(obsQuery),\n    updateQuery: obsQuery.updateQuery.bind(obsQuery),\n    startPolling: obsQuery.startPolling.bind(obsQuery),\n    stopPolling: obsQuery.stopPolling.bind(obsQuery),\n    subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n  }), [obsQuery]);\n\n  return {\n    ...obsQueryFields,\n    variables: createWatchQueryOptions(query, options, defaultWatchQueryOptions).variables,\n    client,\n    called: true,\n    previousData: ref.current.previousData,\n    ...result,\n  };\n}\n\n/**\n * A function to massage options before passing them the ObservableQuery.\n */\nfunction createWatchQueryOptions<TData, TVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<TData, TVariables> = {},\n  defaultOptions?: Partial<WatchQueryOptions<any, any>>\n): WatchQueryOptions<TVariables, TData> {\n  // TODO: For some reason, we pass context, which is the React Apollo Context,\n  // into observable queries, and test for that.\n  // removing hook specific options\n  const {\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    displayName,\n    ...otherOptions\n  } = options;\n\n  let watchQueryOptions = { query, ...otherOptions };\n  if (defaultOptions) {\n    watchQueryOptions = mergeOptions(defaultOptions, watchQueryOptions);\n  }\n\n  if (skip) {\n    watchQueryOptions.fetchPolicy = 'standby';\n  } else if (\n    watchQueryOptions.context?.renderPromises &&\n    (\n      watchQueryOptions.fetchPolicy === 'network-only' ||\n      watchQueryOptions.fetchPolicy === 'cache-and-network'\n    )\n  ) {\n    // this behavior was added to react-apollo without explanation in this PR\n    // https://github.com/apollographql/react-apollo/pull/1579\n    watchQueryOptions.fetchPolicy = 'cache-first';\n  } else if (!watchQueryOptions.fetchPolicy) {\n    // cache-first is the default policy, but we explicitly assign it here so\n    // the cache policies computed based on options can be cleared\n    watchQueryOptions.fetchPolicy = 'cache-first';\n  }\n\n  if (!watchQueryOptions.variables) {\n    watchQueryOptions.variables = {} as TVariables;\n  }\n\n  return watchQueryOptions;\n}\n","import { useMutation } from \"@apollo/client\";\nimport { useEffect } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport { FETCH_TOKEN } from \"../../login/Login.query\";\n\nexport default function WithAuth(Component: any) {\n  return function HandleCheckLogin(props: any) {\n    const [fetchToken] = useMutation(FETCH_TOKEN);\n    const navigate = useNavigate();\n    const userId = sessionStorage.getItem(\"userId\");\n    const token = sessionStorage.getItem(\"accessToken\");\n\n    //* 토큰 체크\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const handleTokenCheck = async () => {\n      try {\n        await fetchToken({\n          variables: {\n            userId,\n            token,\n          },\n        });\n      } catch {\n        alert(\"로그인이 필요합니다.\");\n        navigate(\"/login\");\n        return false;\n      }\n    };\n\n    useEffect(() => {\n      handleTokenCheck();\n      return;\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    return <Component {...props}></Component>;\n  };\n}\n","import styled from \"@emotion/styled\";\n\ninterface IMypageLayoutProps {\n  menu?: boolean;\n}\n\nexport const MypageMenuWrapper = styled.div`\n  width: 226px;\n  min-width: 226px;\n  height: 340px;\n  border: 2px solid #d7d7d7;\n`;\n\nexport const MypageTitle = styled.div`\n  width: 100%;\n  height: 71px;\n  background-color: #4033a2;\n  color: white;\n  font-family: SpoqaHanSansNeo-Bold;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-bottom: 1px solid #d7d7d7;\n  cursor: pointer;\n`;\n\nexport const MypageBtn = styled.button`\n  outline: none;\n  background-color: white;\n  color: ${(props: IMypageLayoutProps) => (props.menu ? \"black\" : \"#999999\")};\n  font-size: 14px;\n  width: 100%;\n  height: 53px;\n  border: none;\n  border-bottom: 1px solid #d7d7d7;\n  cursor: pointer;\n  font-family: ${(props: IMypageLayoutProps) =>\n    props.menu ? \"SpoqaHanSansNeo-Bold\" : \"SpoqaHanSansNeo-Regular\"};\n`;\n\nexport const MypageContentsWrapper = styled.div`\n  width: 821px;\n`;\n","import { useNavigate } from \"react-router\";\nimport {\n  MypageMenuWrapper,\n  MypageTitle,\n  MypageBtn,\n} from \"./MypageLayout.style\";\n\ninterface IMypageLayoutProps {\n  menu: string;\n}\n\nconst MypageLayoutPresenter: React.FC<IMypageLayoutProps> = ({ menu }) => {\n  const navigate = useNavigate();\n\n  return (\n    <MypageMenuWrapper>\n      <MypageTitle\n        onClick={() => {\n          navigate(\"/mypage/main\");\n        }}\n      >\n        My Page\n      </MypageTitle>\n      <MypageBtn\n        menu={menu === \"payment\" ? true : false}\n        onClick={() => {\n          navigate(\"/mypage/payment\");\n        }}\n      >\n        결제내역\n      </MypageBtn>\n      <MypageBtn\n        menu={menu === \"download\" ? true : false}\n        onClick={() => {\n          navigate(\"/mypage/download\");\n        }}\n      >\n        다운로드 내역\n      </MypageBtn>\n      <MypageBtn\n        menu={menu === \"recent\" ? true : false}\n        onClick={() => {\n          navigate(\"/mypage/recent\");\n        }}\n      >\n        최근 본 데이터\n      </MypageBtn>\n      <MypageBtn\n        menu={menu === \"profile\" ? true : false}\n        onClick={() => {\n          navigate(\"/mypage/profile\");\n        }}\n      >\n        회원정보 변경\n      </MypageBtn>\n      <MypageBtn\n        menu={menu === \"withdraw\" ? true : false}\n        style={{ borderBottom: \"none\" }}\n        onClick={() => {\n          navigate(\"/mypage/withdraw\");\n        }}\n      >\n        회원탈퇴\n      </MypageBtn>\n    </MypageMenuWrapper>\n  );\n};\nexport default MypageLayoutPresenter;\n","import MypageLayoutPresenter from \"./MypageLayout.presenter\";\n\ninterface IMypageLayoutProps {\n  menu: string;\n}\n\nconst MypageLayoutContainer: React.FC<IMypageLayoutProps> = ({ menu }) => {\n  return <MypageLayoutPresenter menu={menu} />;\n};\nexport default MypageLayoutContainer;\n","export function blankImg(length: any) {\n  if (length % 3 === 0) {\n    return 3;\n  } else if (length > 3) {\n    return length % 3;\n  } else {\n    return length;\n  }\n}\n","import styled from \"@emotion/styled\";\n\nexport const MypageRecentWrapper = styled.div`\n  max-width: 1920px;\n  min-width: 1100px;\n  width: 100%;\n  padding-top: 58px;\n  display: flex;\n  justify-content: center;\n  padding-bottom: 110px;\n`;\n\nexport const MypageBody = styled.div`\n  display: flex;\n  width: 1100px;\n`;\n\nexport const MypageBodyColumn = styled.div`\n  display: flex;\n  width: 100%;\n  flex-direction: column;\n  margin-left: 53px;\n`;\n\nexport const MypageRecentListText = styled.div`\n  font-size: 12px;\n  color: #999999;\n  margin-bottom: 12px;\n`;\n\nexport const MypageRecentListNumber = styled.span`\n  font-family: SpoqaHanSansNeo-Bold;\n  font-size: 12px;\n`;\n\nexport const MypageDataListWrapper = styled.div`\n  width: 824px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n`;\n\nexport const MypageDataWrapper = styled.div`\n  width: 240px;\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  margin-bottom: 60px;\n  cursor: pointer;\n`;\n\nexport const MypageDataThumbnail = styled.img`\n  width: 240px;\n  height: 232px;\n`;\n\nexport const MypageDataTitle = styled.div`\n  font-family: SpoqaHanSansNeo-Bold;\n  margin-top: 16px;\n  margin-bottom: 16px;\n`;\n\nexport const MypageDataDescription = styled.div`\n  font-size: 12px;\n  color: #999999;\n  text-align: start;\n`;\n\nexport const MypageDataBtnWrapper = styled.div`\n  display: flex;\n  margin-top: 16px;\n`;\n\nexport const MypageDataBestBtn = styled.button`\n  width: 42px;\n  height: 25px;\n  border: 1px solid #999999;\n  outline: none;\n  font-size: 10px;\n  margin-right: 4px;\n  background-color: white;\n`;\n\nexport const MypageDataUpdateBtn = styled.button`\n  outline: none;\n  border: none;\n  background-color: #4033a2;\n  color: white;\n  font-size: 10px;\n  width: 58px;\n  height: 25px;\n`;\n\nexport const DataListImgBlank = styled.div`\n  width: 240px;\n  height: 232px;\n  border: none;\n  outline: none;\n`;\n"],"sourceRoot":""}