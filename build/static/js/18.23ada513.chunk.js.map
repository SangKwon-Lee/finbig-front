{"version":3,"sources":["components/dataList/DataList.presenter.tsx","components/dataList/DataList.container.tsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/@babel/runtime/regenerator/index.js","../../../../src/react/hooks/useMutation.ts","../../../../src/react/hooks/useQuery.ts","utils/blankImg.ts","components/common/pagination/Pagination.style.ts","assets/images/arrowDown.svg","components/common/pagination/Pagination.container.tsx","components/dataList/DataList.query.ts","components/dataList/DataList.style.ts","components/visualList/VisualList.style.ts"],"names":["DataListPresenter","finbigs","blackLength","listInput","setListInput","handleRecentData","handleViewCount","navigate","useNavigate","search","useParams","filter","data","title","includes","length","category","defaultValue","disabled","value","splice","start","limit","map","src","String","thumbnail","onClick","id","viewCount","description","isBest","Array","fill","__","index","style","border","listLength","DataListContainer","userId","sessionStorage","getItem","useState","setBlackLength","useQuery","FETCH_FINBIGS","variables","where","isShow","MyData","FETCH_USER_VIEWDATA","fetchPolicy","useMutation","UPDATE_RECENT_DATA","updateRecentData","UPDATE_FINBIG_VIEWCOUNT","updateFinbigViewCount","useEffect","blankImg","dataId","a","input","finbigView","user","concat","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","module","exports","mutation","options","client","Mutation","called","loading","result","setResult","ref","mutationId","isMounted","Object","assign","current","execute","executeOptions","baseOptions","ignoreResults","clientOptions","mutate","response","errors","graphQLErrors","onCompleted","catch","onError","reset","query","context","defaultWatchQueryOptions","defaultOptions","watchQuery","Query","partial","watchQueryOptions","createWatchQueryOptions","obsQuery","renderPromises","getSSRObservable","registerSSRObservable","ssr","skip","getCurrentResult","addQueryPromise","getOptions","fetchData","sub","subscribe","next","unsubscribe","complete","setObsQuery","previousData","nextResult","setOptions","previousResult","subscription","onNext","last","resetLastResults","hasOwnProperty","networkStatus","disableNetworkFetches","partialRefetch","keys","refetch","ready","obsQueryFields","bind","fetchMore","updateQuery","startPolling","stopPolling","subscribeToMore","otherOptions","PageWrapper","styled","div","Page","button","props","isActive","ArrowLeft","img","ArrowRight","PaginationContainer","pageArr","setPageArr","page","setPage","newPageArr","Math","ceil","handleChangePage","e","target","alert","Number","ArrowSVG","gql","DataListWrapper","DataListTitle","DataListCategoryWrapper","DataListCategoryTitle","DataListSelectWrapper","DataListResult","DataListResultNum","span","DataListSelectBox","select","DataListBody","DataWrapper","DataImg","DataTitle","DataContents","DataBtnWrapper","DataBestBtn","DataUpdateBtn","DataListImgBlank","DataListNoDataText","VisualListWrapper","VisualListMainTitle","VisualListBody","VisualListContentsWrapper","VisualListImg","VisualListImgBlank","VisualListType","VisualListTitle","VisualListCreateAt","VisualListPaginationWrapper"],"mappings":"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","file":"static/js/18.23ada513.chunk.js","sourcesContent":["import {\n  DataBestBtn,\n  DataBtnWrapper,\n  DataContents,\n  DataImg,\n  DataListBody,\n  DataListCategoryTitle,\n  DataListCategoryWrapper,\n  DataListImgBlank,\n  DataListNoDataText,\n  DataListResult,\n  DataListResultNum,\n  DataListSelectBox,\n  DataListSelectWrapper,\n  DataListTitle,\n  DataListWrapper,\n  DataTitle,\n  DataUpdateBtn,\n  DataWrapper,\n} from \"./DataList.style\";\nimport { useNavigate, useParams } from \"react-router\";\nimport PaginationContainer from \"../common/pagination/Pagination.container\";\nimport { Finbig, Maybe } from \"../../commons/types/generated/types\";\nimport { VisualListPaginationWrapper } from \"../visualList/VisualList.style\";\n\ninterface DataListProps {\n  finbigs?: Maybe<Maybe<Finbig>[]> | undefined;\n  blackLength: number;\n  listInput: {\n    start: number;\n    limit: number;\n  };\n  setListInput: React.Dispatch<\n    React.SetStateAction<{\n      start: number;\n      limit: number;\n    }>\n  >;\n  handleViewCount: (dataId: string, viewCount: number) => Promise<void>;\n  handleRecentData: (dataId: any) => Promise<void>;\n}\n\nconst DataListPresenter: React.FC<DataListProps> = ({\n  finbigs,\n  blackLength,\n  listInput,\n  setListInput,\n  handleRecentData,\n  handleViewCount,\n}) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const navigate = useNavigate();\n  const { search } = useParams() || \"\";\n  return (\n    <DataListWrapper>\n      <DataListTitle>{search ? \"검색 결과\" : \"데이터 상품\"}</DataListTitle>\n      <DataListCategoryWrapper>\n        <DataListCategoryTitle>\n          {`전체 (${\n            finbigs?.filter((data) => data?.title?.includes(search || \"\"))\n              .length\n          })`}\n        </DataListCategoryTitle>\n        <DataListCategoryTitle>/</DataListCategoryTitle>\n        <DataListCategoryTitle>\n          {`투자기초 데이터 (${\n            finbigs\n              ?.filter((data) => data?.title?.includes(search || \"\"))\n              .filter((data) => data?.category === \"투자기초 데이터\").length\n          })`}\n        </DataListCategoryTitle>\n        <DataListCategoryTitle>/</DataListCategoryTitle>\n        <DataListCategoryTitle>\n          {`알고리즘 데이터 (${\n            finbigs\n              ?.filter((data) => data?.title?.includes(search || \"\"))\n              .filter((data) => data?.category === \"알고리즘 데이터\").length\n          })`}\n        </DataListCategoryTitle>\n        <DataListCategoryTitle>/</DataListCategoryTitle>\n        <DataListCategoryTitle>\n          {`콜라보 (${\n            finbigs\n              ?.filter((data) => data?.title?.includes(search || \"\"))\n              .filter((data) => data?.category === \"콜라보\").length\n          })`}\n        </DataListCategoryTitle>\n      </DataListCategoryWrapper>\n      <DataListSelectWrapper>\n        <DataListResult>\n          상품이 모두\n          <DataListResultNum>\n            {\n              finbigs?.filter((data) => data?.title?.includes(search || \"\"))\n                .length\n            }\n            개\n          </DataListResultNum>\n          &nbsp;있습니다\n        </DataListResult>\n        <DataListSelectBox defaultValue=\"상품정렬\">\n          <option disabled value=\"상품정렬\">\n            상품 정렬\n          </option>\n          <option>최신순</option>\n        </DataListSelectBox>\n      </DataListSelectWrapper>\n      <DataListBody>\n        {finbigs?.filter((data: any) => data?.title?.includes(search || \"\"))\n          .length !== 0 ? (\n          finbigs\n            ?.filter((data: any) => data?.title?.includes(search || \"\"))\n            .splice(listInput.start, listInput.limit)\n            ?.map((data) => (\n              <DataWrapper key={data?.id}>\n                <DataImg\n                  src={String(data?.thumbnail)}\n                  onClick={() => {\n                    handleViewCount(String(data?.id), data?.viewCount);\n                    handleRecentData(String(data?.id));\n                    navigate(`/data/${data?.id}`);\n                  }}\n                />\n                <DataTitle\n                  onClick={() => {\n                    handleViewCount(String(data?.id), data?.viewCount);\n                    handleRecentData(String(data?.id));\n                    navigate(`/data/${data?.id}`);\n                  }}\n                >\n                  {data?.title}\n                </DataTitle>\n                <DataContents\n                  onClick={() => {\n                    handleViewCount(String(data?.id), data?.viewCount);\n                    handleRecentData(String(data?.id));\n                    navigate(`/data/${data?.id}`);\n                  }}\n                >\n                  {data?.description}\n                </DataContents>\n                <DataBtnWrapper>\n                  {data?.isBest && <DataBestBtn>Best</DataBestBtn>}\n                  <DataUpdateBtn>Update</DataUpdateBtn>\n                </DataBtnWrapper>\n              </DataWrapper>\n            ))\n        ) : (\n          <DataListNoDataText>해당하는 상품이 없습니다</DataListNoDataText>\n        )}\n        {new Array(3 - blackLength).fill(1).map((__, index) => (\n          <DataListImgBlank\n            key={index}\n            style={{ border: \"none\" }}\n          ></DataListImgBlank>\n        ))}\n      </DataListBody>\n      <VisualListPaginationWrapper>\n        <PaginationContainer\n          listLength={\n            finbigs?.filter((data: any) => data?.title?.includes(search || \"\"))\n              .length\n          }\n          listInput={listInput}\n          setListInput={setListInput}\n          search={search || \"\"}\n        />\n      </VisualListPaginationWrapper>\n    </DataListWrapper>\n  );\n};\n\nexport default DataListPresenter;\n","import DataListPresenter from \"./DataList.presenter\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport {\n  FETCH_FINBIGS,\n  FETCH_USER_VIEWDATA,\n  UPDATE_FINBIG_VIEWCOUNT,\n  UPDATE_RECENT_DATA,\n} from \"./DataList.query\";\nimport {\n  Mutation,\n  MutationUpdateFinbigArgs,\n  MutationUpdateUserArgs,\n  Query,\n  QueryFinbigsArgs,\n  QueryUserArgs,\n} from \"../../commons/types/generated/types\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { blankImg } from \"../../utils/blankImg\";\nimport { useParams } from \"react-router\";\n\nconst DataListContainer = () => {\n  const userId = sessionStorage.getItem(\"userId\");\n  const { search } = useParams();\n\n  //* 페이지네이션 상태\n  const [listInput, setListInput] = useState({\n    start: 0,\n    limit: 6,\n  });\n\n  //* 빈 이미지\n  const [blackLength, setBlackLength] = useState<number>(1);\n\n  //* 데이터 상품 받아오기\n  const { data } = useQuery<Query, QueryFinbigsArgs>(FETCH_FINBIGS, {\n    variables: {\n      where: {\n        isShow: true,\n      },\n    },\n  });\n\n  //* 최근 본 데이터 불러오기\n  const { data: MyData } = useQuery<Query, QueryUserArgs>(FETCH_USER_VIEWDATA, {\n    variables: {\n      id: String(userId),\n    },\n    fetchPolicy: \"no-cache\",\n  });\n\n  //* 최근 본 데이터 뮤테이션\n  const [updateRecentData] = useMutation<Mutation, MutationUpdateUserArgs>(\n    UPDATE_RECENT_DATA\n  );\n\n  //*조회수 증가 뮤테이션\n  const [updateFinbigViewCount] = useMutation<\n    Mutation,\n    MutationUpdateFinbigArgs\n  >(UPDATE_FINBIG_VIEWCOUNT);\n\n  //* 길이 맞추기\n  useEffect(() => {\n    if (data?.finbigs?.length) {\n      setBlackLength(\n        blankImg(\n          data?.finbigs\n            ?.filter((data: any) => data?.title?.includes(search || \"\"))\n            .splice(listInput.start, listInput.limit).length\n        )\n      );\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data, listInput, search]);\n\n  //* 조회수 증가\n  const handleViewCount = async (dataId: string, viewCount: number) => {\n    try {\n      await updateFinbigViewCount({\n        variables: {\n          input: {\n            data: {\n              viewCount: viewCount + 1,\n            },\n            where: {\n              id: String(dataId),\n            },\n          },\n        },\n      });\n    } catch (e) {}\n  };\n\n  //* 최근 본 데이터 함수\n  const handleRecentData = async (dataId: any) => {\n    if (!userId) return;\n    try {\n      await updateRecentData({\n        variables: {\n          input: {\n            data: {\n              finbigView: MyData?.user?.finbigView\n                ?.map((data) => String(data?.id))\n                .concat(dataId),\n            },\n            where: {\n              id: String(userId),\n            },\n          },\n        },\n      });\n    } catch (e) {}\n  };\n\n  return (\n    <>\n      <DataListPresenter\n        finbigs={data?.finbigs}\n        blackLength={blackLength}\n        listInput={listInput}\n        setListInput={setListInput}\n        handleViewCount={handleViewCount}\n        handleRecentData={handleRecentData}\n      />\n    </>\n  );\n};\nexport default DataListContainer;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","module.exports = require(\"regenerator-runtime\");\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n} from '../types/types';\n\nimport {\n  ApolloCache,\n  DefaultContext,\n  mergeOptions,\n  OperationVariables,\n} from '../../core';\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>,\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = useState<Omit<MutationResult, 'reset'>>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  // TODO: Trying to assign these in a useEffect or useLayoutEffect breaks\n  // higher-order components.\n  {\n    Object.assign(ref.current, { client, options, mutation });\n  }\n\n  const execute = useCallback((\n    executeOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {}\n  ) => {\n    const {client, options, mutation} = ref.current;\n    const baseOptions = { ...options, mutation };\n    if (!ref.current.result.loading && !baseOptions.ignoreResults) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client,\n      });\n    }\n\n    const mutationId = ++ref.current.mutationId;\n    const clientOptions = mergeOptions(\n      baseOptions,\n      executeOptions as any,\n    );\n\n    return client.mutate(clientOptions).then((response) => {\n      const { data, errors } = response;\n      const error =\n        errors && errors.length > 0\n          ? new ApolloError({ graphQLErrors: errors })\n          : void 0;\n\n      if (\n        mutationId === ref.current.mutationId &&\n        !clientOptions.ignoreResults\n      ) {\n        const result = {\n          called: true,\n          loading: false,\n          data,\n          error,\n          client,\n        };\n\n        if (ref.current.isMounted && !equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      baseOptions.onCompleted?.(response.data!);\n      executeOptions.onCompleted?.(response.data!);\n      return response;\n    }).catch((error) => {\n      if (\n        mutationId === ref.current.mutationId &&\n        ref.current.isMounted\n      ) {\n        const result = {\n          loading: false,\n          error,\n          data: void 0,\n          called: true,\n          client,\n        };\n\n        if (!equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      if (baseOptions.onError || clientOptions.onError) {\n        baseOptions.onError?.(error);\n        executeOptions.onError?.(error);\n        // TODO(brian): why are we returning this here???\n        return { data: void 0, errors: error };\n      }\n\n      throw error;\n    });\n  }, []);\n\n  const reset = useCallback(() => {\n    setResult({ called: false, loading: false, client });\n  }, []);\n\n  useEffect(() => () => {\n    ref.current.isMounted = false;\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n","import { useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { equal } from '@wry/equality';\nimport { OperationVariables, mergeOptions } from '../../core';\nimport { getApolloContext } from '../context';\nimport { ApolloError } from '../../errors';\nimport {\n  ApolloQueryResult,\n  NetworkStatus,\n  ObservableQuery,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from '../../core';\nimport {\n  QueryHookOptions,\n  QueryResult,\n} from '../types/types';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useQuery<\n  TData = any,\n  TVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>,\n): QueryResult<TData, TVariables> {\n  const context = useContext(getApolloContext());\n  const client = useApolloClient(options?.client);\n  const defaultWatchQueryOptions = client.defaultOptions.watchQuery;\n  verifyDocumentType(query, DocumentType.Query);\n  const [obsQuery, setObsQuery] = useState(() => {\n    const watchQueryOptions = createWatchQueryOptions(query, options, defaultWatchQueryOptions);\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    let obsQuery: ObservableQuery<TData, TVariables> | null = null;\n    if (context.renderPromises) {\n      obsQuery = context.renderPromises.getSSRObservable(watchQueryOptions);\n    }\n\n    if (!obsQuery) {\n      // Is it safe (StrictMode/memory-wise) to call client.watchQuery here?\n      obsQuery = client.watchQuery(watchQueryOptions);\n      if (context.renderPromises) {\n        context.renderPromises.registerSSRObservable(\n          obsQuery,\n          watchQueryOptions,\n        );\n      }\n    }\n\n    if (\n      context.renderPromises &&\n      options?.ssr !== false &&\n      !options?.skip &&\n      obsQuery.getCurrentResult().loading\n    ) {\n      // TODO: This is a legacy API which could probably be cleaned up\n      context.renderPromises.addQueryPromise(\n        {\n          // The only options which seem to actually be used by the\n          // RenderPromises class are query and variables.\n          getOptions: () => createWatchQueryOptions(query, options, defaultWatchQueryOptions),\n          fetchData: () => new Promise<void>((resolve) => {\n            const sub = obsQuery!.subscribe({\n              next(result) {\n                if (!result.loading) {\n                  resolve()\n                  sub.unsubscribe();\n                }\n              },\n              error() {\n                resolve();\n                sub.unsubscribe();\n              },\n              complete() {\n                resolve();\n              },\n            });\n          }),\n        },\n        // This callback never seemed to do anything\n        () => null,\n      );\n    }\n\n    return obsQuery;\n  });\n\n  let [result, setResult] = useState(() => {\n    const result = obsQuery.getCurrentResult();\n    if (!result.loading && options) {\n      if (result.error) {\n        options.onError?.(result.error);\n      } else if (result.data) {\n        options.onCompleted?.(result.data);\n      }\n    }\n\n    return result;\n  });\n\n  const ref = useRef({\n    client,\n    query,\n    options,\n    result,\n    previousData: void 0 as TData | undefined,\n    watchQueryOptions: createWatchQueryOptions(query, options, defaultWatchQueryOptions),\n  });\n\n  // An effect to recreate the obsQuery whenever the client or query changes.\n  // This effect is also responsible for checking and updating the obsQuery\n  // options whenever they change.\n  useEffect(() => {\n    const watchQueryOptions = createWatchQueryOptions(query, options, defaultWatchQueryOptions);\n    let nextResult: ApolloQueryResult<TData> | undefined;\n    if (ref.current.client !== client || !equal(ref.current.query, query)) {\n      const obsQuery = client.watchQuery(watchQueryOptions);\n      setObsQuery(obsQuery);\n      nextResult = obsQuery.getCurrentResult();\n    } else if (!equal(ref.current.watchQueryOptions, watchQueryOptions)) {\n      obsQuery.setOptions(watchQueryOptions).catch(() => {});\n      nextResult = obsQuery.getCurrentResult();\n      ref.current.watchQueryOptions = watchQueryOptions;\n    }\n\n    if (nextResult) {\n      const previousResult = ref.current.result;\n      if (previousResult.data) {\n        ref.current.previousData = previousResult.data;\n      }\n\n      setResult(ref.current.result = nextResult);\n      if (!nextResult.loading && options) {\n        if (nextResult.error) {\n          options.onError?.(nextResult.error);\n        } else if (nextResult.data) {\n          options.onCompleted?.(nextResult.data);\n        }\n      }\n    }\n\n    Object.assign(ref.current, { client, query });\n  }, [obsQuery, client, query, options]);\n\n  // An effect to subscribe to the current observable query\n  useEffect(() => {\n    if (context.renderPromises) {\n      return;\n    }\n\n    let subscription = obsQuery.subscribe(onNext, onError);\n    // We use `getCurrentResult()` instead of the callback argument because\n    // the values differ slightly. Specifically, loading results will have\n    // an empty object for data instead of `undefined` for some reason.\n    function onNext() {\n      const previousResult = ref.current.result;\n      const result = obsQuery.getCurrentResult();\n      // Make sure we're not attempting to re-render similar results\n      if (\n        previousResult &&\n        previousResult.loading === result.loading &&\n        previousResult.networkStatus === result.networkStatus &&\n        equal(previousResult.data, result.data)\n      ) {\n        return;\n      }\n\n      if (previousResult.data) {\n        ref.current.previousData = previousResult.data;\n      }\n\n      setResult(ref.current.result = result);\n      if (!result.loading) {\n        ref.current.options?.onCompleted?.(result.data);\n      }\n    }\n\n    function onError(error: Error) {\n      const last = obsQuery[\"last\"];\n      subscription.unsubscribe();\n      // Unfortunately, if `lastError` is set in the current\n      // `observableQuery` when the subscription is re-created,\n      // the subscription will immediately receive the error, which will\n      // cause it to terminate again. To avoid this, we first clear\n      // the last error/result from the `observableQuery` before re-starting\n      // the subscription, and restore it afterwards (so the subscription\n      // has a chance to stay open).\n      try {\n        obsQuery.resetLastResults();\n        subscription = obsQuery.subscribe(onNext, onError);\n      } finally {\n        obsQuery[\"last\"] = last;\n      }\n\n      if (!error.hasOwnProperty('graphQLErrors')) {\n        // The error is not a GraphQL error\n        throw error;\n      }\n\n      const previousResult = ref.current.result;\n      if (\n        (previousResult && previousResult.loading) ||\n        !equal(error, previousResult.error)\n      ) {\n        setResult(ref.current.result = {\n          data: previousResult.data,\n          error: error as ApolloError,\n          loading: false,\n          networkStatus: NetworkStatus.error,\n        });\n        ref.current.options?.onError?.(error as ApolloError);\n      }\n    }\n\n    return () => subscription.unsubscribe();\n  }, [obsQuery, context.renderPromises, client.disableNetworkFetches]);\n\n  let partial: boolean | undefined;\n  ({ partial, ...result } = result);\n\n  {\n    // BAD BOY CODE BLOCK WHERE WE PUT SIDE-EFFECTS IN THE RENDER FUNCTION\n    //\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (\n      partial &&\n      options?.partialRefetch &&\n      !result.loading &&\n      (!result.data || Object.keys(result.data).length === 0) &&\n      obsQuery.options.fetchPolicy !== 'cache-only'\n    ) {\n      result = {\n        ...result,\n        loading: true,\n        networkStatus: NetworkStatus.refetch,\n      };\n\n      obsQuery.refetch();\n    }\n\n    // TODO: This is a hack to make sure useLazyQuery executions update the\n    // obsevable query options for ssr.\n    if (\n      context.renderPromises &&\n      options?.ssr !== false &&\n      !options?.skip &&\n      result.loading\n    ) {\n      obsQuery.setOptions(createWatchQueryOptions(query, options, defaultWatchQueryOptions)).catch(() => {});\n    }\n\n    // We assign options during rendering as a guard to make sure that\n    // callbacks like onCompleted and onError are not stale.\n    Object.assign(ref.current, { options });\n  }\n\n  if (\n    (context.renderPromises || client.disableNetworkFetches) &&\n    options?.ssr === false\n  ) {\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    result = ref.current.result = {\n      loading: true,\n      data: void 0 as unknown as TData,\n      error: void 0,\n      networkStatus: NetworkStatus.loading,\n    };\n  } else if (options?.skip || options?.fetchPolicy === 'standby') {\n    // When skipping a query (ie. we're not querying for data but still want to\n    // render children), make sure the `data` is cleared out and `loading` is\n    // set to `false` (since we aren't loading anything).\n    //\n    // NOTE: We no longer think this is the correct behavior. Skipping should\n    // not automatically set `data` to `undefined`, but instead leave the\n    // previous data in place. In other words, skipping should not mandate that\n    // previously received data is all of a sudden removed. Unfortunately,\n    // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n    // to address this.\n    result = {\n      loading: false,\n      data: void 0 as unknown as TData,\n      error: void 0,\n      networkStatus: NetworkStatus.ready,\n    };\n  }\n\n  if (result.errors && result.errors.length) {\n    // Until a set naming convention for networkError and graphQLErrors is\n    // decided upon, we map errors (graphQLErrors) to the error options.\n    // TODO: Is it possible for both result.error and result.errors to be\n    // defined here?\n    result = {\n      ...result,\n      error: result.error || new ApolloError({ graphQLErrors: result.errors }),\n    };\n  }\n\n  const obsQueryFields = useMemo(() => ({\n    refetch: obsQuery.refetch.bind(obsQuery),\n    fetchMore: obsQuery.fetchMore.bind(obsQuery),\n    updateQuery: obsQuery.updateQuery.bind(obsQuery),\n    startPolling: obsQuery.startPolling.bind(obsQuery),\n    stopPolling: obsQuery.stopPolling.bind(obsQuery),\n    subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n  }), [obsQuery]);\n\n  return {\n    ...obsQueryFields,\n    variables: createWatchQueryOptions(query, options, defaultWatchQueryOptions).variables,\n    client,\n    called: true,\n    previousData: ref.current.previousData,\n    ...result,\n  };\n}\n\n/**\n * A function to massage options before passing them the ObservableQuery.\n */\nfunction createWatchQueryOptions<TData, TVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<TData, TVariables> = {},\n  defaultOptions?: Partial<WatchQueryOptions<any, any>>\n): WatchQueryOptions<TVariables, TData> {\n  // TODO: For some reason, we pass context, which is the React Apollo Context,\n  // into observable queries, and test for that.\n  // removing hook specific options\n  const {\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    displayName,\n    ...otherOptions\n  } = options;\n\n  let watchQueryOptions = { query, ...otherOptions };\n  if (defaultOptions) {\n    watchQueryOptions = mergeOptions(defaultOptions, watchQueryOptions);\n  }\n\n  if (skip) {\n    watchQueryOptions.fetchPolicy = 'standby';\n  } else if (\n    watchQueryOptions.context?.renderPromises &&\n    (\n      watchQueryOptions.fetchPolicy === 'network-only' ||\n      watchQueryOptions.fetchPolicy === 'cache-and-network'\n    )\n  ) {\n    // this behavior was added to react-apollo without explanation in this PR\n    // https://github.com/apollographql/react-apollo/pull/1579\n    watchQueryOptions.fetchPolicy = 'cache-first';\n  } else if (!watchQueryOptions.fetchPolicy) {\n    // cache-first is the default policy, but we explicitly assign it here so\n    // the cache policies computed based on options can be cleared\n    watchQueryOptions.fetchPolicy = 'cache-first';\n  }\n\n  if (!watchQueryOptions.variables) {\n    watchQueryOptions.variables = {} as TVariables;\n  }\n\n  return watchQueryOptions;\n}\n","export function blankImg(length: any) {\n  if (length % 3 === 0) {\n    return 3;\n  } else if (length > 3) {\n    return length % 3;\n  } else {\n    return length;\n  }\n}\n","import styled from \"@emotion/styled\";\n\ninterface PaginationProps {\n  isActive?: boolean;\n}\n\n//* 페이지 네이션\nexport const PageWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 40px;\n  width: 100%;\n`;\n\nexport const Page = styled.button`\n  width: 28px;\n  height: 28px;\n  border: ${(props: PaginationProps) =>\n    props.isActive ? \"none\" : \"1px solid #cccccc\"};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-family: SpoqaHanSansNeo-Medium;\n  font-size: 14px;\n  color: ${(props: PaginationProps) => (props.isActive ? \"white\" : \"#999999\")};\n  cursor: pointer;\n  outline: none;\n  background-color: ${(props: PaginationProps) =>\n    props.isActive ? \"black\" : \"white\"};\n  margin: 0px 4px 0px 4px;\n  border-radius: 5px;\n`;\n\nexport const ArrowLeft = styled.img`\n  transform: rotate(90deg);\n  width: 14px;\n  height: 14px;\n`;\n\nexport const ArrowRight = styled.img`\n  transform: rotate(-90deg);\n  width: 14px;\n  height: 14px;\n`;\n","export default __webpack_public_path__ + \"static/media/arrowDown.7664fa56.svg\";","import { PageWrapper, Page, ArrowLeft, ArrowRight } from \"./Pagination.style\";\nimport ArrowSVG from \"../../../assets/images/arrowDown.svg\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\ninterface PaginationProps {\n  listLength: number | undefined;\n  listInput: {\n    start: number;\n    limit: number;\n  };\n  setListInput: React.Dispatch<\n    React.SetStateAction<{\n      start: number;\n      limit: number;\n    }>\n  >;\n  search?: string;\n}\n\nconst PaginationContainer: React.FC<PaginationProps> = ({\n  listLength,\n  listInput,\n  setListInput,\n  search,\n}) => {\n  const { limit } = listInput;\n  const [pageArr, setPageArr] = useState([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n  const [page, setPage] = useState(1);\n\n  useEffect(() => {\n    if (search) {\n      setPage(1);\n      setListInput({\n        ...listInput,\n        start: 0,\n      });\n    }\n    if (listLength && listLength <= limit * 10) {\n      const newPageArr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].filter(\n        (data) => data < Math.ceil(listLength / limit) + 1\n      );\n      setPage(1);\n      setPageArr(newPageArr);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [listLength, search]);\n\n  //* 페이지 네이션\n  const handleChangePage = (e: any) => {\n    setListInput({\n      ...listInput,\n      start: e.target.value * limit - limit,\n    });\n    setPage(e.target.value);\n  };\n\n  //* 다음 페이지 누르기\n  const handleChangeNext = () => {\n    //@ts-ignore\n\n    if (page >= Math.ceil(listLength / limit)) {\n      alert(\"우마지막 페이지 입니다\");\n      return;\n    }\n    if (Number(page) === pageArr[pageArr.length - 1]) {\n      let newPageArr = pageArr\n        .map((data) => data + 10)\n        //@ts-ignore\n        .filter((data) => data <= Math.ceil(listLength / limit));\n      setPageArr(newPageArr);\n    }\n    setPage(() => Number(page) + 1);\n    setListInput({\n      ...listInput,\n      start: listInput.start + limit,\n    });\n  };\n\n  //* 이전 페이지 누르기\n  const handleChangePrev = () => {\n    if (page <= 1) {\n      alert(\"첫 페이지입니다.\");\n      return;\n    }\n    setPage(() => Number(page) - 1);\n    setListInput({\n      ...listInput,\n      start: listInput.start - limit,\n    });\n    if (Number(page) === 11) {\n      setPageArr([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n    } else if (Number(page) === pageArr[0]) {\n      let newPageArr = pageArr.map((data) => data - 10);\n      setPageArr(newPageArr);\n    }\n  };\n\n  return (\n    <>\n      <PageWrapper>\n        <Page onClick={handleChangePrev}>\n          <ArrowLeft src={ArrowSVG} />\n        </Page>\n        {pageArr.map((data) => (\n          <Page\n            key={data}\n            value={data}\n            onClick={handleChangePage}\n            isActive={listInput.start / limit + 1 === data ? true : false}\n          >\n            {data}\n          </Page>\n        ))}\n        <Page onClick={handleChangeNext}>\n          <ArrowRight src={ArrowSVG} />\n        </Page>\n      </PageWrapper>\n    </>\n  );\n};\n\nexport default PaginationContainer;\n","import { gql } from \"@apollo/client\";\n\nexport const FETCH_FINBIGS = gql`\n  query finbigs($sort: String, $limit: Int, $start: Int, $where: JSON) {\n    finbigs(sort: $sort, limit: $limit, start: $start, where: $where) {\n      id\n      created_at\n      updated_at\n      title\n      description\n      thumbnail\n      order\n      viewCount\n      isBest\n      category\n      type\n      period\n      contents\n      isShow\n      apiName\n    }\n  }\n`;\n\nexport const FETCH_FINBIGS_COUNT = gql`\n  query finbigsConnection($where: JSON) {\n    finbigsConnection(where: $where) {\n      aggregate {\n        count\n        totalCount\n      }\n    }\n  }\n`;\n\nexport const UPDATE_FINBIG_VIEWCOUNT = gql`\n  mutation updateFinbig($input: updateFinbigInput) {\n    updateFinbig(input: $input) {\n      finbig {\n        id\n      }\n    }\n  }\n`;\n\nexport const FETCH_USER_VIEWDATA = gql`\n  query user($id: ID!) {\n    user(id: $id) {\n      finbigView {\n        id\n        title\n      }\n    }\n  }\n`;\n\nexport const UPDATE_RECENT_DATA = gql`\n  mutation updateUser($input: updateUserInput) {\n    updateUser(input: $input) {\n      user {\n        finbigView {\n          id\n          title\n        }\n      }\n    }\n  }\n`;\n","import styled from \"@emotion/styled\";\n\nexport const DataListWrapper = styled.div`\n  max-width: 1920px;\n  min-width: 1100px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 70px;\n  padding-bottom: 110px;\n`;\n\nexport const DataListTitle = styled.div`\n  font-size: 20px;\n`;\n\nexport const DataListCategoryWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 465px;\n  margin-top: 27px;\n  margin-bottom: 78px;\n`;\n\nexport const DataListCategoryTitle = styled.div`\n  font-size: 14px;\n  color: #999999;\n`;\n\nexport const DataListSelectWrapper = styled.div`\n  width: 1100px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 44px;\n`;\n\nexport const DataListResult = styled.div`\n  font-size: 12px;\n  color: #999999;\n`;\n\nexport const DataListResultNum = styled.span`\n  font-size: 12px;\n  font-family: SpoqaHanSansNeo-Bold;\n`;\n\nexport const DataListSelectBox = styled.select`\n  color: #999999;\n  width: 103px;\n  height: 34px;\n  border: 1px solid #cccccc;\n  padding-left: 8px;\n  outline: none;\n`;\n\nexport const DataListBody = styled.div`\n  width: 1100px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n`;\n\nexport const DataWrapper = styled.div`\n  width: 300px;\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  margin-bottom: 60px;\n  cursor: pointer;\n  transition: all 0.3s;\n`;\n\nexport const DataImg = styled.img`\n  width: 300px;\n  height: 290px;\n`;\n\nexport const DataTitle = styled.div`\n  font-family: SpoqaHanSansNeo-Bold;\n  margin-top: 16px;\n  margin-bottom: 16px;\n`;\n\nexport const DataContents = styled.div`\n  font-size: 12px;\n  color: #999999;\n`;\n\nexport const DataBtnWrapper = styled.div`\n  display: flex;\n  margin-top: 16px;\n`;\nexport const DataBestBtn = styled.button`\n  width: 42px;\n  height: 25px;\n  border: 1px solid #999999;\n  outline: none;\n  font-size: 10px;\n  margin-right: 4px;\n  background-color: white;\n`;\n\nexport const DataUpdateBtn = styled.button`\n  outline: none;\n  border: none;\n  background-color: #4033a2;\n  color: white;\n  font-size: 10px;\n  width: 58px;\n  height: 25px;\n`;\n\nexport const DataListImgBlank = styled.div`\n  width: 280px;\n  height: 320px;\n  border: none;\n  outline: none;\n`;\n\nexport const DataListNoDataText = styled.div`\n  text-align: center;\n  width: 100%;\n`;\n","import styled from \"@emotion/styled\";\n\nexport const VisualListWrapper = styled.div`\n  max-width: 1920px;\n  min-width: 1100px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 70px;\n  padding-bottom: 100px;\n`;\n\nexport const VisualListMainTitle = styled.div`\n  font-size: 20px;\n`;\n\nexport const VisualListBody = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 1100px;\n  justify-content: space-between;\n  margin-top: 70px;\n`;\n\nexport const VisualListContentsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const VisualListImg = styled.img`\n  width: 280px;\n  height: 320px;\n  cursor: pointer;\n`;\n\nexport const VisualListImgBlank = styled.div`\n  width: 280px;\n  height: 320px;\n  border: none;\n  outline: none;\n`;\n\nexport const VisualListType = styled.div`\n  font-size: 14px;\n  margin-top: 25px;\n  color: #999999;\n  margin-bottom: 4px;\n`;\n\nexport const VisualListTitle = styled.div`\n  font-family: SpoqaHanSansNeo-Bold;\n  margin-bottom: 26px;\n  cursor: pointer;\n`;\n\nexport const VisualListCreateAt = styled.div`\n  font-size: 12px;\n  color: #999999;\n  margin-bottom: 80px;\n`;\n\nexport const VisualListPaginationWrapper = styled.div``;\n"],"sourceRoot":""}