{"version":3,"sources":["components/visualDetail/VisualDetail.style.ts","components/visualDetail/VisualDetail.presenter.tsx","components/visualDetail/VisualDetail.query.ts","components/visualDetail/VisualDetail.container.tsx","../../../../src/react/hooks/useQuery.ts","components/dataDetail/DataDetail.style.ts"],"names":["VisualDetailWrapper","styled","div","VisualDetailImg","img","VisualDetailType","VisualDetailTitle","VisualDetailContents","VisualDetailDivide","VisualDetailPresenter","data","navigate","useNavigate","src","thumbnail","title","description","contents","initialValue","finbigs","map","String","onClick","id","FETCH_VISUAL_DATUM","gql","VisualDetailContainer","visualId","useParams","useQuery","variables","visualDatum","query","options","context","client","defaultWatchQueryOptions","defaultOptions","watchQuery","Query","partial","watchQueryOptions","createWatchQueryOptions","obsQuery","renderPromises","getSSRObservable","registerSSRObservable","ssr","skip","getCurrentResult","loading","addQueryPromise","getOptions","fetchData","Promise","resolve","sub","subscribe","next","result","unsubscribe","error","complete","setObsQuery","onError","onCompleted","setResult","ref","previousData","nextResult","current","setOptions","catch","previousResult","Object","assign","subscription","onNext","last","resetLastResults","hasOwnProperty","networkStatus","disableNetworkFetches","partialRefetch","keys","length","fetchPolicy","refetch","ready","errors","graphQLErrors","obsQueryFields","bind","fetchMore","updateQuery","startPolling","stopPolling","subscribeToMore","called","otherOptions","DataDetailWrapper","DataDetailBodyWrapper","DataDetailContentsWrapper","DataDetailImg","DataDetailTitle","DataDetailContents","DataDetailTableWrapper","DataDetailTableTitle","DataDetailTableContents","DataDetailPeriodWrapper","DataDetailPeriodTitle","DataDetailBtnWrapper","DataDetailDownBtn","button","DataDetailLikeBtn","DataDetailLikeImg","DataDetailDivider","DataDetailOther","DataDetailOhterWrapper","DataDetailOhterContentsWrapper","DataDetailTitleWrapper","DataDetailOtherTilte","DataDetailOtherImg","DataDetailOtherContents"],"mappings":"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","file":"static/js/33.80dd9932.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const VisualDetailWrapper = styled.div`\n  max-width: 1920px;\n  min-width: 1100px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 70px;\n  padding-bottom: 100px;\n`;\n\nexport const VisualDetailImg = styled.img`\n  width: 444px;\n  height: 428px;\n`;\n\nexport const VisualDetailType = styled.div`\n  font-size: 14px;\n  margin-top: 37px;\n  margin-bottom: 4px;\n  color: #999999;\n`;\n\nexport const VisualDetailTitle = styled.div`\n  font-family: SpoqaHanSansNeo-Bold;\n  margin-bottom: 32px;\n`;\n\nexport const VisualDetailContents = styled.div`\n  font-size: 14px;\n  color: #999999;\n  width: 444px;\n  flex-wrap: wrap;\n  text-align: center;\n`;\n\nexport const VisualDetailDivide = styled.div`\n  max-width: 1920px;\n  min-width: 1100px;\n  width: 100%;\n  border-top: 1px solid #c1c1c1;\n  margin-bottom: 24px;\n  margin-top: 45px;\n`;\n","import { Maybe, VisualData } from \"../../commons/types/generated/types\";\nimport {\n  VisualDetailContents,\n  VisualDetailDivide,\n  VisualDetailImg,\n  VisualDetailTitle,\n  VisualDetailType,\n  VisualDetailWrapper,\n} from \"./VisualDetail.style\";\nimport { Viewer } from \"@toast-ui/react-editor\";\nimport {\n  DataDetailOhterContentsWrapper,\n  DataDetailOhterWrapper,\n  DataDetailOther,\n  DataDetailOtherContents,\n  DataDetailOtherImg,\n  DataDetailOtherTilte,\n  DataDetailTitleWrapper,\n} from \"../dataDetail/DataDetail.style\";\nimport { useNavigate } from \"react-router\";\n\ninterface VisualDetailProps {\n  data: Maybe<VisualData> | undefined;\n}\n\nconst VisualDetailPresenter: React.FC<VisualDetailProps> = ({ data }) => {\n  const navigate = useNavigate();\n\n  return (\n    <>\n      <VisualDetailWrapper>\n        <VisualDetailImg src={data?.thumbnail || \"\"} />\n        <VisualDetailType>[데이터 활용]</VisualDetailType>\n        <VisualDetailTitle>{data?.title}</VisualDetailTitle>\n        <VisualDetailContents>{data?.description}</VisualDetailContents>\n        <VisualDetailDivide></VisualDetailDivide>\n        {data?.contents && <Viewer initialValue={data.contents} />}\n        <DataDetailOther>관련 상품</DataDetailOther>\n        <DataDetailOhterWrapper>\n          {data?.finbigs?.map((data) => (\n            <DataDetailOhterContentsWrapper>\n              <DataDetailOtherImg\n                src={String(data?.thumbnail)}\n                onClick={() => {\n                  navigate(`/data/${data?.id}`);\n                }}\n              />\n              <DataDetailTitleWrapper>\n                <DataDetailOtherTilte\n                  onClick={() => {\n                    navigate(`/data/${data?.id}`);\n                  }}\n                >\n                  {data?.title}\n                </DataDetailOtherTilte>\n                <DataDetailOtherContents>\n                  {data?.description}\n                </DataDetailOtherContents>\n              </DataDetailTitleWrapper>\n            </DataDetailOhterContentsWrapper>\n          ))}\n        </DataDetailOhterWrapper>\n      </VisualDetailWrapper>\n    </>\n  );\n};\n\nexport default VisualDetailPresenter;\n","import { gql } from \"@apollo/client\";\n\nexport const FETCH_VISUAL_DATUM = gql`\n  query visualDatum($id: ID!) {\n    visualDatum(id: $id) {\n      id\n      created_at\n      title\n      category\n      description\n      viewCount\n      contents\n      thumbnail\n      finbigs {\n        id\n        title\n        thumbnail\n        description\n      }\n    }\n  }\n`;\n","import { useQuery } from \"@apollo/client\";\nimport { useParams } from \"react-router\";\nimport {\n  Query,\n  QueryVisualDatumArgs,\n} from \"../../commons/types/generated/types\";\nimport VisualDetailPresenter from \"./VisualDetail.presenter\";\nimport { FETCH_VISUAL_DATUM } from \"./VisualDetail.query\";\n\nconst VisualDetailContainer = () => {\n  const { visualId } = useParams();\n\n  //* 데이터 불러오기 쿼리\n  const { data } = useQuery<Query, QueryVisualDatumArgs>(FETCH_VISUAL_DATUM, {\n    variables: {\n      id: String(visualId),\n    },\n  });\n  return <VisualDetailPresenter data={data?.visualDatum} />;\n};\n\nexport default VisualDetailContainer;\n","import { useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { equal } from '@wry/equality';\nimport { OperationVariables, mergeOptions } from '../../core';\nimport { getApolloContext } from '../context';\nimport { ApolloError } from '../../errors';\nimport {\n  ApolloQueryResult,\n  NetworkStatus,\n  ObservableQuery,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from '../../core';\nimport {\n  QueryHookOptions,\n  QueryResult,\n} from '../types/types';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useQuery<\n  TData = any,\n  TVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>,\n): QueryResult<TData, TVariables> {\n  const context = useContext(getApolloContext());\n  const client = useApolloClient(options?.client);\n  const defaultWatchQueryOptions = client.defaultOptions.watchQuery;\n  verifyDocumentType(query, DocumentType.Query);\n  const [obsQuery, setObsQuery] = useState(() => {\n    const watchQueryOptions = createWatchQueryOptions(query, options, defaultWatchQueryOptions);\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    let obsQuery: ObservableQuery<TData, TVariables> | null = null;\n    if (context.renderPromises) {\n      obsQuery = context.renderPromises.getSSRObservable(watchQueryOptions);\n    }\n\n    if (!obsQuery) {\n      // Is it safe (StrictMode/memory-wise) to call client.watchQuery here?\n      obsQuery = client.watchQuery(watchQueryOptions);\n      if (context.renderPromises) {\n        context.renderPromises.registerSSRObservable(\n          obsQuery,\n          watchQueryOptions,\n        );\n      }\n    }\n\n    if (\n      context.renderPromises &&\n      options?.ssr !== false &&\n      !options?.skip &&\n      obsQuery.getCurrentResult().loading\n    ) {\n      // TODO: This is a legacy API which could probably be cleaned up\n      context.renderPromises.addQueryPromise(\n        {\n          // The only options which seem to actually be used by the\n          // RenderPromises class are query and variables.\n          getOptions: () => createWatchQueryOptions(query, options, defaultWatchQueryOptions),\n          fetchData: () => new Promise<void>((resolve) => {\n            const sub = obsQuery!.subscribe({\n              next(result) {\n                if (!result.loading) {\n                  resolve()\n                  sub.unsubscribe();\n                }\n              },\n              error() {\n                resolve();\n                sub.unsubscribe();\n              },\n              complete() {\n                resolve();\n              },\n            });\n          }),\n        },\n        // This callback never seemed to do anything\n        () => null,\n      );\n    }\n\n    return obsQuery;\n  });\n\n  let [result, setResult] = useState(() => {\n    const result = obsQuery.getCurrentResult();\n    if (!result.loading && options) {\n      if (result.error) {\n        options.onError?.(result.error);\n      } else if (result.data) {\n        options.onCompleted?.(result.data);\n      }\n    }\n\n    return result;\n  });\n\n  const ref = useRef({\n    client,\n    query,\n    options,\n    result,\n    previousData: void 0 as TData | undefined,\n    watchQueryOptions: createWatchQueryOptions(query, options, defaultWatchQueryOptions),\n  });\n\n  // An effect to recreate the obsQuery whenever the client or query changes.\n  // This effect is also responsible for checking and updating the obsQuery\n  // options whenever they change.\n  useEffect(() => {\n    const watchQueryOptions = createWatchQueryOptions(query, options, defaultWatchQueryOptions);\n    let nextResult: ApolloQueryResult<TData> | undefined;\n    if (ref.current.client !== client || !equal(ref.current.query, query)) {\n      const obsQuery = client.watchQuery(watchQueryOptions);\n      setObsQuery(obsQuery);\n      nextResult = obsQuery.getCurrentResult();\n    } else if (!equal(ref.current.watchQueryOptions, watchQueryOptions)) {\n      obsQuery.setOptions(watchQueryOptions).catch(() => {});\n      nextResult = obsQuery.getCurrentResult();\n      ref.current.watchQueryOptions = watchQueryOptions;\n    }\n\n    if (nextResult) {\n      const previousResult = ref.current.result;\n      if (previousResult.data) {\n        ref.current.previousData = previousResult.data;\n      }\n\n      setResult(ref.current.result = nextResult);\n      if (!nextResult.loading && options) {\n        if (nextResult.error) {\n          options.onError?.(nextResult.error);\n        } else if (nextResult.data) {\n          options.onCompleted?.(nextResult.data);\n        }\n      }\n    }\n\n    Object.assign(ref.current, { client, query });\n  }, [obsQuery, client, query, options]);\n\n  // An effect to subscribe to the current observable query\n  useEffect(() => {\n    if (context.renderPromises) {\n      return;\n    }\n\n    let subscription = obsQuery.subscribe(onNext, onError);\n    // We use `getCurrentResult()` instead of the callback argument because\n    // the values differ slightly. Specifically, loading results will have\n    // an empty object for data instead of `undefined` for some reason.\n    function onNext() {\n      const previousResult = ref.current.result;\n      const result = obsQuery.getCurrentResult();\n      // Make sure we're not attempting to re-render similar results\n      if (\n        previousResult &&\n        previousResult.loading === result.loading &&\n        previousResult.networkStatus === result.networkStatus &&\n        equal(previousResult.data, result.data)\n      ) {\n        return;\n      }\n\n      if (previousResult.data) {\n        ref.current.previousData = previousResult.data;\n      }\n\n      setResult(ref.current.result = result);\n      if (!result.loading) {\n        ref.current.options?.onCompleted?.(result.data);\n      }\n    }\n\n    function onError(error: Error) {\n      const last = obsQuery[\"last\"];\n      subscription.unsubscribe();\n      // Unfortunately, if `lastError` is set in the current\n      // `observableQuery` when the subscription is re-created,\n      // the subscription will immediately receive the error, which will\n      // cause it to terminate again. To avoid this, we first clear\n      // the last error/result from the `observableQuery` before re-starting\n      // the subscription, and restore it afterwards (so the subscription\n      // has a chance to stay open).\n      try {\n        obsQuery.resetLastResults();\n        subscription = obsQuery.subscribe(onNext, onError);\n      } finally {\n        obsQuery[\"last\"] = last;\n      }\n\n      if (!error.hasOwnProperty('graphQLErrors')) {\n        // The error is not a GraphQL error\n        throw error;\n      }\n\n      const previousResult = ref.current.result;\n      if (\n        (previousResult && previousResult.loading) ||\n        !equal(error, previousResult.error)\n      ) {\n        setResult(ref.current.result = {\n          data: previousResult.data,\n          error: error as ApolloError,\n          loading: false,\n          networkStatus: NetworkStatus.error,\n        });\n        ref.current.options?.onError?.(error as ApolloError);\n      }\n    }\n\n    return () => subscription.unsubscribe();\n  }, [obsQuery, context.renderPromises, client.disableNetworkFetches]);\n\n  let partial: boolean | undefined;\n  ({ partial, ...result } = result);\n\n  {\n    // BAD BOY CODE BLOCK WHERE WE PUT SIDE-EFFECTS IN THE RENDER FUNCTION\n    //\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (\n      partial &&\n      options?.partialRefetch &&\n      !result.loading &&\n      (!result.data || Object.keys(result.data).length === 0) &&\n      obsQuery.options.fetchPolicy !== 'cache-only'\n    ) {\n      result = {\n        ...result,\n        loading: true,\n        networkStatus: NetworkStatus.refetch,\n      };\n\n      obsQuery.refetch();\n    }\n\n    // TODO: This is a hack to make sure useLazyQuery executions update the\n    // obsevable query options for ssr.\n    if (\n      context.renderPromises &&\n      options?.ssr !== false &&\n      !options?.skip &&\n      result.loading\n    ) {\n      obsQuery.setOptions(createWatchQueryOptions(query, options, defaultWatchQueryOptions)).catch(() => {});\n    }\n\n    // We assign options during rendering as a guard to make sure that\n    // callbacks like onCompleted and onError are not stale.\n    Object.assign(ref.current, { options });\n  }\n\n  if (\n    (context.renderPromises || client.disableNetworkFetches) &&\n    options?.ssr === false\n  ) {\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    result = ref.current.result = {\n      loading: true,\n      data: void 0 as unknown as TData,\n      error: void 0,\n      networkStatus: NetworkStatus.loading,\n    };\n  } else if (options?.skip || options?.fetchPolicy === 'standby') {\n    // When skipping a query (ie. we're not querying for data but still want to\n    // render children), make sure the `data` is cleared out and `loading` is\n    // set to `false` (since we aren't loading anything).\n    //\n    // NOTE: We no longer think this is the correct behavior. Skipping should\n    // not automatically set `data` to `undefined`, but instead leave the\n    // previous data in place. In other words, skipping should not mandate that\n    // previously received data is all of a sudden removed. Unfortunately,\n    // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n    // to address this.\n    result = {\n      loading: false,\n      data: void 0 as unknown as TData,\n      error: void 0,\n      networkStatus: NetworkStatus.ready,\n    };\n  }\n\n  if (result.errors && result.errors.length) {\n    // Until a set naming convention for networkError and graphQLErrors is\n    // decided upon, we map errors (graphQLErrors) to the error options.\n    // TODO: Is it possible for both result.error and result.errors to be\n    // defined here?\n    result = {\n      ...result,\n      error: result.error || new ApolloError({ graphQLErrors: result.errors }),\n    };\n  }\n\n  const obsQueryFields = useMemo(() => ({\n    refetch: obsQuery.refetch.bind(obsQuery),\n    fetchMore: obsQuery.fetchMore.bind(obsQuery),\n    updateQuery: obsQuery.updateQuery.bind(obsQuery),\n    startPolling: obsQuery.startPolling.bind(obsQuery),\n    stopPolling: obsQuery.stopPolling.bind(obsQuery),\n    subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n  }), [obsQuery]);\n\n  return {\n    ...obsQueryFields,\n    variables: createWatchQueryOptions(query, options, defaultWatchQueryOptions).variables,\n    client,\n    called: true,\n    previousData: ref.current.previousData,\n    ...result,\n  };\n}\n\n/**\n * A function to massage options before passing them the ObservableQuery.\n */\nfunction createWatchQueryOptions<TData, TVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<TData, TVariables> = {},\n  defaultOptions?: Partial<WatchQueryOptions<any, any>>\n): WatchQueryOptions<TVariables, TData> {\n  // TODO: For some reason, we pass context, which is the React Apollo Context,\n  // into observable queries, and test for that.\n  // removing hook specific options\n  const {\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    displayName,\n    ...otherOptions\n  } = options;\n\n  let watchQueryOptions = { query, ...otherOptions };\n  if (defaultOptions) {\n    watchQueryOptions = mergeOptions(defaultOptions, watchQueryOptions);\n  }\n\n  if (skip) {\n    watchQueryOptions.fetchPolicy = 'standby';\n  } else if (\n    watchQueryOptions.context?.renderPromises &&\n    (\n      watchQueryOptions.fetchPolicy === 'network-only' ||\n      watchQueryOptions.fetchPolicy === 'cache-and-network'\n    )\n  ) {\n    // this behavior was added to react-apollo without explanation in this PR\n    // https://github.com/apollographql/react-apollo/pull/1579\n    watchQueryOptions.fetchPolicy = 'cache-first';\n  } else if (!watchQueryOptions.fetchPolicy) {\n    // cache-first is the default policy, but we explicitly assign it here so\n    // the cache policies computed based on options can be cleared\n    watchQueryOptions.fetchPolicy = 'cache-first';\n  }\n\n  if (!watchQueryOptions.variables) {\n    watchQueryOptions.variables = {} as TVariables;\n  }\n\n  return watchQueryOptions;\n}\n","import styled from \"@emotion/styled\";\n\nexport const DataDetailWrapper = styled.div`\n  max-width: 1920px;\n  min-width: 1100px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 80px;\n  padding-bottom: 70px;\n`;\n\nexport const DataDetailBodyWrapper = styled.div`\n  display: flex;\n  width: 1100px;\n  justify-content: space-between;\n`;\n\nexport const DataDetailContentsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding-top: 24px;\n  width: 537px;\n`;\n\nexport const DataDetailImg = styled.img`\n  width: 465px;\n  height: 444px;\n`;\n\nexport const DataDetailTitle = styled.div`\n  font-size: 20px;\n  font-family: SpoqaHanSansNeo-Bold;\n  margin-bottom: 24px;\n`;\n\nexport const DataDetailContents = styled.div`\n  font-size: 14px;\n  color: #999999;\n  /* margin-bottom: 100px; */\n  height: 180px;\n`;\n\nexport const DataDetailTableWrapper = styled.div`\n  display: flex;\n  border-bottom: 1px solid #c1c1c1;\n`;\n\nexport const DataDetailTableTitle = styled.div`\n  width: 134px;\n  height: 55px;\n  background-color: #f3f3f3;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 12px;\n`;\n\nexport const DataDetailTableContents = styled.div`\n  width: 134px;\n  height: 55px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 12px;\n`;\n\nexport const DataDetailPeriodWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 536px;\n  margin-top: 20px;\n  margin-bottom: 16px;\n  align-items: center;\n  height: 38px;\n`;\n\nexport const DataDetailPeriodTitle = styled.div`\n  font-size: 14px;\n`;\n\nexport const DataDetailBtnWrapper = styled.div`\n  display: flex;\n`;\n\nexport const DataDetailDownBtn = styled.button`\n  width: 482px;\n  height: 48px;\n  background-color: #4033a2;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  color: white;\n  font-size: 14px;\n  margin-right: 6px;\n`;\n\nexport const DataDetailLikeBtn = styled.button`\n  width: 48px;\n  height: 48px;\n  cursor: pointer;\n  outline: none;\n  border: 1px solid #999999;\n  background-color: white;\n  padding-top: 4px;\n`;\n\nexport const DataDetailLikeImg = styled.img``;\n\nexport const DataDetailDivider = styled.div`\n  width: 100%;\n  max-width: 1920px;\n  min-width: 1100px;\n  border-top: 1px solid #cccccc;\n  margin: 100px 0px 100px 0px;\n`;\n\nexport const DataDetailBigImg = styled.img`\n  width: 1100px;\n  height: 658px;\n  border: 1px solid #cccccc;\n`;\n\nexport const DataDetailOther = styled.div`\n  border-top: 1px solid #cccccc;\n  border-bottom: 1px solid #cccccc;\n  width: 100%;\n  max-width: 1920px;\n  min-width: 1100px;\n  padding-top: 23px;\n  padding-bottom: 23px;\n  margin-top: 100px;\n  margin-bottom: 67px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-family: SpoqaHanSansNeo-Bold;\n`;\n\nexport const DataDetailOhterWrapper = styled.div`\n  width: 1100px;\n  flex-wrap: wrap;\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const DataDetailOhterContentsWrapper = styled.div`\n  width: 510px;\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 18px;\n`;\n\nexport const DataDetailTitleWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 37px;\n  width: 318px;\n`;\n\nexport const DataDetailOtherTilte = styled.div`\n  font-family: SpoqaHanSansNeo-Bold;\n  margin-bottom: 23px;\n  cursor: pointer;\n`;\n\nexport const DataDetailOtherImg = styled.img`\n  width: 168px;\n  height: 168px;\n  cursor: pointer;\n`;\n\nexport const DataDetailOtherContents = styled.div`\n  font-size: 12px;\n  color: #999999;\n`;\n"],"sourceRoot":""}