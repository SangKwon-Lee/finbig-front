{"version":3,"sources":["components/signup/Signup.style.ts","assets/images/bigCheck.svg","components/signup/Signup.presenter.tsx","components/signup/Signup.query.ts","components/signup/Signup.container.tsx","assets/images/info.svg","assets/images/checkGray.svg","assets/images/checkColor.svg"],"names":["SignupWrapper","styled","div","SignupTitle","SignupBodyWrapper","SignupTitleWrapper","CheckImg","img","SignupSubTitle","h2","SignupContents","Divider","SignupBox","SignupBtnWrapper","SignupWhiteBtn","button","SignupBlueBtn","SignupErrorMsg","SignupInputWrapper","SignupInputTitle","SignupInput","input","props","isCheckName","passwordError","SignupErrorWrapper","SignipErrorImg","SignupEmailBtn","SignupRadioWrapper","SignupRadioTitle","label","SignupRadio","SignupSuccessMsg","SignupBigCheckWrapper","SignupSuccessTitle","SignupSuccessSubTitle","schma","yup","username","required","min","password","matches","confirmPassword","oneOf","email","name","phone","emailReception","smsReception","SignupPresenter","checkInput","setCheckInput","handleAllCheck","handleNextBtn","errorMsg","step","handleCreateUser","handleEmailAuth","isAuth","handleEmailAuthCheck","checkUsername","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","getValues","navigate","useNavigate","onClick","src","first","second","CheckColorSVG","CheckGraySVG","onSubmit","onChange","InfoSVG","message","type","style","marginTop","disabled","isSend","width","isOk","isError","placeholder","id","value","checked","htmlFor","marginBottom","margin","BigCheckSVG","CREATE_USER","gql","EMAIL_AUTH","EMAIL_AUTH_CHECK","DELETE_EMAIL_AUTH","FETCH_USERS","SignupContainer","useState","setErrorMsg","setStep","setIsAuth","setIsCheckName","useMutation","createUser","emailAuth","deleteEmailAuth","useQuery","data","refetch","fetchMore","variables","where","a","alert","code","auth","Auth","emailAuths","filter","length","e","target","checkUser","users"],"mappings":"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","file":"static/js/29.78b3ab22.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\ninterface ISignupStyleProps {\n  isCheckName?: boolean;\n  passwordError?: string;\n}\n\nexport const SignupWrapper = styled.div`\n  max-width: 1920px;\n  min-width: 1100px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding-top: 70px;\n  padding-bottom: 100px;\n`;\n\nexport const SignupTitle = styled.div`\n  font-size: 20px;\n  margin-bottom: 50px;\n`;\n\nexport const SignupBodyWrapper = styled.div`\n  width: 1100px;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const SignupTitleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n`;\n\nexport const CheckImg = styled.img`\n  margin-right: 13px;\n`;\n\nexport const SignupSubTitle = styled.h2`\n  font-family: SpoqaHanSansNeo-Bold;\n`;\n\nexport const SignupContents = styled.div`\n  font-size: 12px;\n  margin-left: 36px;\n  margin-top: 7px;\n  color: #999999;\n`;\n\nexport const Divider = styled.div`\n  width: 1100px;\n  border-top: 1px solid #cccccc;\n  margin: 30px 0px 30px 0px;\n`;\n\nexport const SignupBox = styled.div`\n  width: 1100px;\n  height: 192px;\n  border: 1px solid #cccccc;\n  padding: 12px 44px 12px 28px;\n  margin: 14px 0px 30px 0px;\n  overflow: auto;\n  font-size: 12px;\n  color: #999999;\n  line-height: 20px;\n`;\n\nexport const SignupBtnWrapper = styled.div`\n  width: 1100px;\n  display: flex;\n  justify-content: center;\n`;\n\nexport const SignupWhiteBtn = styled.button`\n  width: 263px;\n  height: 46px;\n  background-color: white;\n  cursor: pointer;\n  outline: none;\n  border: 1px solid #cccccc;\n  margin-right: 16px;\n`;\n\nexport const SignupBlueBtn = styled.button`\n  width: 263px;\n  height: 46px;\n  background-color: #4033a2;\n  cursor: pointer;\n  outline: none;\n  border: none;\n  color: white;\n`;\n\nexport const SignupErrorMsg = styled.div`\n  color: #ff0000;\n  font-size: 11px;\n  margin-bottom: 12px;\n`;\n\nexport const SignupInputWrapper = styled.div`\n  margin-bottom: 16px;\n  display: flex;\n  align-items: center;\n`;\n\nexport const SignupInputTitle = styled.div`\n  width: 82px;\n  font-size: 14px;\n  margin-right: 50px;\n`;\n\nexport const SignupInput = styled.input`\n  width: 463px;\n  height: 36px;\n  background-color: ${(props: ISignupStyleProps) =>\n    props.isCheckName ? \"#ffdcdc\" : \"white\"};\n  background-color: ${(props: ISignupStyleProps) =>\n    props.passwordError || props.isCheckName ? \"#ffdcdc\" : \"white\"};\n  border: 1px solid #cccccc;\n  padding-left: 13px;\n  outline: none;\n  font-size: 14px;\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n`;\n\nexport const SignupErrorWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 14px;\n  font-size: 14px;\n  color: #ff0000;\n`;\n\nexport const SignipErrorImg = styled.img`\n  margin-right: 10px;\n`;\n\nexport const SignupEmailBtn = styled.button`\n  width: 128px;\n  height: 36px;\n  outline: none;\n  color: white;\n  background-color: #4033a2;\n  font-size: 14px;\n  text-align: center;\n  border: none;\n  cursor: pointer;\n`;\n\nexport const SignupRadioWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: 20px;\n`;\n\nexport const SignupRadioTitle = styled.label`\n  font-size: 12px;\n`;\n\nexport const SignupRadio = styled.input`\n  margin-right: 4px;\n  -webkit-appearance: none;\n  width: 16px;\n  height: 16px;\n  border: 1px solid darkgray;\n  border-radius: 50%;\n  outline: none;\n  background: white;\n  :before {\n    content: \"\";\n    display: block;\n    width: 60%;\n    height: 60%;\n    margin: 20% auto;\n    border-radius: 50%;\n  }\n  :checked:before {\n    background: #999999;\n  }\n`;\n\nexport const SignupSuccessMsg = styled.div`\n  font-size: 14px;\n  margin-left: 14px;\n  color: #4033a2;\n`;\n\nexport const SignupBigCheckWrapper = styled.div`\n  width: 1100px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nexport const SignupSuccessTitle = styled.div`\n  font-family: SpoqaHanSansNeo-Bold;\n  font-size: 24px;\n  margin-top: 38px;\n`;\nexport const SignupSuccessSubTitle = styled.div`\n  font-size: 24px;\n  margin-bottom: 71px;\n`;\n","export default __webpack_public_path__ + \"static/media/bigCheck.16dc7207.svg\";","import {\n  CheckImg,\n  SignupSubTitle,\n  SignupTitle,\n  SignupTitleWrapper,\n  SignupWrapper,\n  SignupBodyWrapper,\n  SignupContents,\n  Divider,\n  SignupBox,\n  SignupBtnWrapper,\n  SignupWhiteBtn,\n  SignupBlueBtn,\n  SignupErrorMsg,\n  SignupInputTitle,\n  SignupInputWrapper,\n  SignupInput,\n  SignupRadio,\n  SignupRadioWrapper,\n  SignupRadioTitle,\n  SignupEmailBtn,\n  SignipErrorImg,\n  SignupErrorWrapper,\n  SignupSuccessMsg,\n  SignupBigCheckWrapper,\n  SignupSuccessTitle,\n  SignupSuccessSubTitle,\n} from \"./Signup.style\";\nimport CheckGraySVG from \"../../assets/images/checkGray.svg\";\nimport CheckColorSVG from \"../../assets/images/checkColor.svg\";\nimport React from \"react\";\nimport { useNavigate } from \"react-router\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport { MutationCreateUserArgs } from \"../../commons/types/generated/types\";\nimport InfoSVG from \"../../assets/images/info.svg\";\nimport BigCheckSVG from \"../../assets/images/bigCheck.svg\";\n\ninterface ISignupProps {\n  checkInput: {\n    first: boolean;\n    second: boolean;\n  };\n  setCheckInput: React.Dispatch<\n    React.SetStateAction<{\n      first: boolean;\n      second: boolean;\n    }>\n  >;\n  handleAllCheck: () => void;\n  handleNextBtn: () => void;\n  errorMsg: boolean;\n  step: number;\n  handleCreateUser: (data: MutationCreateUserArgs) => void;\n  handleEmailAuth: (email: string) => Promise<void>;\n  isAuth: {\n    isSend: boolean;\n    isOk: boolean;\n    isError: boolean;\n  };\n  handleEmailAuthCheck: (auth: string) => Promise<void>;\n  checkUsername: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  isCheckName: boolean;\n}\n\nconst schma = yup.object({\n  username: yup\n    .string()\n    .required(\"필수 입력입니다.\")\n    .min(4, \"아이디는 4글자 이상이어야 합니다.\"),\n  password: yup\n    .string()\n    .required(\"비밀번호는 8자 이상, 소문자와 대문자기 포함되어야 합니다.\")\n    .min(8, \"비밀번호는 8자 이상, 소문자와 대문자가 포함되어야 합니다.\")\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/,\n      \"비밀번호는 8자 이상, 소문자와 대문자가 포함되어야 합니다.\"\n    ),\n  confirmPassword: yup\n    .string()\n    .required(\"비밀번호가 서로 다릅니다.\")\n    .oneOf([yup.ref(\"password\")], \"비밀번호가 서로 다릅니다.\"),\n  email: yup\n    .string()\n    .required(\"필수 입력입니다.\")\n    .email(\"이메일 형식을 지켜주세요.\"),\n  name: yup.string().required(\"필수 입력입니다.\"),\n  phone: yup.string().required(\"필수 입력입니다.\"),\n  emailReception: yup.string().required(),\n  smsReception: yup.string().required(),\n});\n\nconst SignupPresenter: React.FC<ISignupProps> = ({\n  checkInput,\n  setCheckInput,\n  handleAllCheck,\n  handleNextBtn,\n  errorMsg,\n  step,\n  handleCreateUser,\n  handleEmailAuth,\n  isAuth,\n  handleEmailAuthCheck,\n  checkUsername,\n  isCheckName,\n}) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    getValues,\n  } = useForm({ resolver: yupResolver(schma) });\n  const navigate = useNavigate();\n\n  return (\n    <SignupWrapper>\n      {step === 0 ? (\n        <SignupTitle>회원가입 약관동의</SignupTitle>\n      ) : step === 1 ? (\n        <SignupTitle>회원가입 입력</SignupTitle>\n      ) : (\n        <SignupTitle>회원가입 완료</SignupTitle>\n      )}\n      <SignupBodyWrapper>\n        {step === 0 && (\n          <>\n            <SignupTitleWrapper onClick={handleAllCheck}>\n              <CheckImg\n                src={\n                  checkInput.first && checkInput.second\n                    ? CheckColorSVG\n                    : CheckGraySVG\n                }\n              />\n              <SignupSubTitle>전체 약관동의</SignupSubTitle>\n            </SignupTitleWrapper>\n            <SignupContents>\n              전체 동의는 필수 및 선택 정보에 대한 동의도 포함 되어 있으며,\n              개별적으로도 동의를 선택 할 수 있습니다.\n            </SignupContents>\n            <Divider />\n            <SignupTitleWrapper\n              onClick={() => {\n                setCheckInput({\n                  ...checkInput,\n                  first: !checkInput.first,\n                });\n              }}\n            >\n              <CheckImg src={checkInput.first ? CheckColorSVG : CheckGraySVG} />\n              <SignupSubTitle>이용약관 동의(필수)</SignupSubTitle>\n            </SignupTitleWrapper>\n            <SignupBox>\n              전체 동의는 필수 및 선택 정보에 대한 동의도 포함 되어 있으며,\n              개별적으로도 동의를 선택 할 수 있습니다.전체 동의는 필수 및 선택\n              정보에 대한 동의도 포함 되어 있으며, 개별적으로도 동의를 선택 할\n              수 있습니다.전체 동의는 필수 및 선택 정보에 대한 동의도 포함 되어\n              있으며, 개별적으로도 동의를 선택 할 수 있습니다.전체 동의는 필수\n              및 선택 정보에 대한 동의도 포함 되어 있으며, 개별적으로도 동의를\n              선택 할 수 있습니다.전체 동의는 필수 및 선택 정보에 대한 동의도\n              포함 되어 있으며, 개별적으로도 동의를 선택 할 수 있습니다.전체\n              동의는 필수 및 선택 정보에 대한 동의도 포함 되어 있으며,\n              개별적으로도 동의를 선택 할 수 있습니다.전체 동의는 필수 및 선택\n              정보에 대한 동의도 포함 되어 있으며, 개별적으로도 동의를 선택 할\n              수 있습니다.전체 동의는 필수 및 선택 정보에 대한 동의도 포함 되어\n              있으며, 개별적으로도 동의를 선택 할 수 있습니다.전체 동의는 필수\n              및 선택 정보에 대한 동의도 포함 되어 있으며, 개별적으로도 동의를\n              선택 할 수 있습니다.전체 동의는 필수 및 선택 정보에 대한 동의도\n              포함 되어 있으며, 개별적으로도 동의를 선택 할 수 있습니다.전체\n              동의는 필수 및 선택 정보에 대한 동의도 포함 되어 있으며,\n              개별적으로도 동의를 선택 할 수 있습니다.전체 동의는 필수 및 선택\n              정보에 대한 동의도 포함 되어 있으며, 개별적으로도 동의를 선택 할\n              수전체 동의는 필수 및 선택 정보에 대한 동의도 포함 되어 있으며,\n              개별적으로도 동의를 선택 할 수 있습니다.전체 동의는 필수 및 선택\n              정보에 대한 동의도 포함 되어 있으며, 개별적으로도 동의를 선택 할\n              수 있습니다. 있습니다.있습니다.전체 동의는 필수 및 선택 정보에\n              대한 동의도 포함 되어 있으며, 개별적으로도 동의를 선택 할 수\n              있습니다.전체 동의는 필수 및 선택 정보에 대한 동의도 포함 되어\n              있으며, 개별적으로도 동의를 선택 할 수전체 동의는 필수 및 선택\n              정보에 대한 동의도 포함 되어 있으며, 개별적으로도 동의를 선택 할\n              수 있습니다.전체 동의는 필수 및 선택 정보에 대한 동의도 포함 되어\n              있으며, 개별적으로도 동의를 선택 할 수 있습니다. 있습니다.\n            </SignupBox>\n            <SignupTitleWrapper\n              onClick={() => {\n                setCheckInput({\n                  ...checkInput,\n                  second: !checkInput.second,\n                });\n              }}\n            >\n              <CheckImg\n                src={checkInput.second ? CheckColorSVG : CheckGraySVG}\n              />\n              <SignupSubTitle>이용약관 동의(필수)</SignupSubTitle>\n            </SignupTitleWrapper>\n            <SignupBox>\n              전체 동의는 필수 및 선택 정보에 대한 동의도 포함 되어 있으며,\n              개별적으로도 동의를 선택 할 수 있습니다.전체 동의는 필수 및 선택\n              정보에 대한 동의도 포함 되어 있으며, 개별적으로도 동의를 선택 할\n              수 있습니다.전체 동의는 필수 및 선택 정보에 대한 동의도 포함 되어\n              있으며, 개별적으로도 동의를 선택 할 수 있습니다.전체 동의는 필수\n              및 선택 정보에 대한 동의도 포함 되어 있으며, 개별적으로도 동의를\n              선택 할 수 있습니다.전체 동의는 필수 및 선택 정보에 대한 동의도\n              포함 되어 있으며, 개별적으로도 동의를 선택 할 수 있습니다.전체\n              동의는 필수 및 선택 정보에 대한 동의도 포함 되어 있으며,\n              개별적으로도 동의를 선택 할 수 있습니다.전체 동의는 필수 및 선택\n              정보에 대한 동의도 포함 되어 있으며, 개별적으로도 동의를 선택 할\n              수 있습니다.전체 동의는 필수 및 선택 정보에 대한 동의도 포함 되어\n              있으며, 개별적으로도 동의를 선택 할 수 있습니다.전체 동의는 필수\n              및 선택 정보에 대한 동의도 포함 되어 있으며, 개별적으로도 동의를\n              선택 할 수 있습니다.전체 동의는 필수 및 선택 정보에 대한 동의도\n              포함 되어 있으며, 개별적으로도 동의를 선택 할 수 있습니다.전체\n              동의는 필수 및 선택 정보에 대한 동의도 포함 되어 있으며,\n              개별적으로도 동의를 선택 할 수 있습니다.전체 동의는 필수 및 선택\n              정보에 대한 동의도 포함 되어 있으며, 개별적으로도 동의를 선택 할\n              수전체 동의는 필수 및 선택 정보에 대한 동의도 포함 되어 있으며,\n              개별적으로도 동의를 선택 할 수 있습니다.전체 동의는 필수 및 선택\n              정보에 대한 동의도 포함 되어 있으며, 개별적으로도 동의를 선택 할\n              수 있습니다. 있습니다.있습니다.전체 동의는 필수 및 선택 정보에\n              대한 동의도 포함 되어 있으며, 개별적으로도 동의를 선택 할 수\n              있습니다.전체 동의는 필수 및 선택 정보에 대한 동의도 포함 되어\n              있으며, 개별적으로도 동의를 선택 할 수전체 동의는 필수 및 선택\n              정보에 대한 동의도 포함 되어 있으며, 개별적으로도 동의를 선택 할\n              수 있습니다.전체 동의는 필수 및 선택 정보에 대한 동의도 포함 되어\n              있으며, 개별적으로도 동의를 선택 할 수 있습니다. 있습니다.\n            </SignupBox>\n            {errorMsg && (\n              <SignupErrorMsg>\n                모든 약관에 동의해야 회원가입을 진행할 수 있습니다.\n              </SignupErrorMsg>\n            )}\n            <SignupBtnWrapper>\n              <SignupWhiteBtn\n                onClick={() => {\n                  navigate(\"/\");\n                }}\n              >\n                취소\n              </SignupWhiteBtn>\n              <SignupBlueBtn onClick={handleNextBtn}>다음</SignupBlueBtn>\n            </SignupBtnWrapper>\n          </>\n        )}\n        {step === 1 && (\n          <>\n            <form onSubmit={handleSubmit(handleCreateUser)}>\n              <SignupSubTitle>전체 약관 동의</SignupSubTitle>\n              <Divider />\n              <SignupInputWrapper>\n                <SignupInputTitle>아이디</SignupInputTitle>\n                <SignupInput\n                  isCheckName={isCheckName}\n                  {...register(\"username\")}\n                  onChange={checkUsername}\n                ></SignupInput>\n                {isCheckName && (\n                  <>\n                    <SignupErrorWrapper>\n                      <SignipErrorImg src={InfoSVG}></SignipErrorImg>\n                      중복된 아이디입니다.\n                    </SignupErrorWrapper>\n                  </>\n                )}\n                {errors?.username?.message && (\n                  <SignupErrorWrapper>\n                    <SignipErrorImg src={InfoSVG}></SignipErrorImg>\n                    {errors?.username?.message}\n                  </SignupErrorWrapper>\n                )}\n              </SignupInputWrapper>\n              <SignupInputWrapper>\n                <SignupInputTitle>비밀번호</SignupInputTitle>\n                <SignupInput\n                  type=\"password\"\n                  {...register(\"password\")}\n                  passwordError={errors?.password?.message}\n                ></SignupInput>\n\n                {errors?.password?.message && (\n                  <SignupErrorWrapper>\n                    <SignipErrorImg src={InfoSVG}></SignipErrorImg>\n                    {errors?.password?.message}\n                  </SignupErrorWrapper>\n                )}\n              </SignupInputWrapper>\n              <SignupInputWrapper>\n                <SignupInputTitle>비밀번호 확인</SignupInputTitle>\n                <SignupInput\n                  {...register(\"confirmPassword\")}\n                  type=\"password\"\n                  passwordError={errors?.confirmPassword?.message}\n                ></SignupInput>\n                {errors?.confirmPassword?.message && (\n                  <SignupErrorWrapper>\n                    <SignipErrorImg src={InfoSVG}></SignipErrorImg>\n                    {errors?.confirmPassword?.message}\n                  </SignupErrorWrapper>\n                )}\n              </SignupInputWrapper>\n              <Divider style={{ marginTop: \"16px\" }} />\n              <SignupInputWrapper>\n                <SignupInputTitle>이메일</SignupInputTitle>\n                <SignupInput\n                  disabled={isAuth.isSend}\n                  style={{ width: \"335px\" }}\n                  {...register(\"email\")}\n                ></SignupInput>\n                {isAuth.isSend ? (\n                  <>\n                    <SignupEmailBtn\n                      disabled={isAuth.isOk}\n                      onClick={() => handleEmailAuthCheck(getValues(\"auth\"))}\n                    >\n                      인증번호 확인\n                    </SignupEmailBtn>\n                    {isAuth.isOk && (\n                      <SignupSuccessMsg>인증 성공</SignupSuccessMsg>\n                    )}\n                    {isAuth.isError && (\n                      <SignupErrorWrapper>\n                        인증 실패했습니다.\n                      </SignupErrorWrapper>\n                    )}\n                    {errors?.email?.message && (\n                      <SignupErrorWrapper>\n                        <SignipErrorImg src={InfoSVG}></SignipErrorImg>\n                        {errors?.email?.message}\n                      </SignupErrorWrapper>\n                    )}\n                  </>\n                ) : (\n                  <>\n                    <SignupEmailBtn\n                      disabled={isAuth.isOk}\n                      onClick={() => {\n                        handleEmailAuth(getValues(\"email\"));\n                      }}\n                    >\n                      인증번호 발송\n                    </SignupEmailBtn>\n                    {errors?.email?.message && (\n                      <SignupErrorWrapper>\n                        <SignipErrorImg src={InfoSVG}></SignipErrorImg>\n                        {errors?.email?.message}\n                      </SignupErrorWrapper>\n                    )}\n                  </>\n                )}\n              </SignupInputWrapper>\n              <SignupInputWrapper>\n                <SignupInputTitle>인증번호</SignupInputTitle>\n                <SignupInput\n                  disabled={isAuth.isOk}\n                  {...register(\"auth\")}\n                ></SignupInput>\n              </SignupInputWrapper>\n              <Divider style={{ marginTop: \"16px\" }} />\n              <SignupInputWrapper>\n                <SignupInputTitle>이름</SignupInputTitle>\n                <SignupInput {...register(\"name\")}></SignupInput>\n                {errors?.name?.message && (\n                  <SignupErrorWrapper>\n                    <SignipErrorImg src={InfoSVG}></SignipErrorImg>\n                    {errors?.name?.message}\n                  </SignupErrorWrapper>\n                )}\n              </SignupInputWrapper>\n              <SignupInputWrapper>\n                <SignupInputTitle>휴대전화번호</SignupInputTitle>\n                <SignupInput\n                  type=\"number\"\n                  placeholder=\"(-)없이 숫자만 입력해주세요\"\n                  {...register(\"phone\")}\n                ></SignupInput>\n                {errors?.phone?.message && (\n                  <SignupErrorWrapper>\n                    <SignipErrorImg src={InfoSVG}></SignipErrorImg>\n                    {errors?.phone?.message}\n                  </SignupErrorWrapper>\n                )}\n              </SignupInputWrapper>\n              <Divider style={{ marginTop: \"16px\" }} />\n              <SignupInputWrapper>\n                <SignupInputTitle>이메일 수신</SignupInputTitle>\n                <SignupRadioWrapper>\n                  <SignupRadio\n                    type=\"radio\"\n                    id=\"emailTrue\"\n                    {...register(\"emailReception\")}\n                    value=\"true\"\n                    checked\n                  />\n                  <SignupRadioTitle htmlFor=\"emailTrue\">\n                    수신 허용\n                  </SignupRadioTitle>\n                </SignupRadioWrapper>\n                <SignupRadioWrapper>\n                  <SignupRadio\n                    type=\"radio\"\n                    id=\"emailFalse\"\n                    {...register(\"emailReception\")}\n                    value=\"false\"\n                  />\n                  <SignupRadioTitle htmlFor=\"emailFalse\">\n                    수신 거부\n                  </SignupRadioTitle>\n                </SignupRadioWrapper>\n              </SignupInputWrapper>\n              <SignupInputWrapper>\n                <SignupInputTitle>SMS 수신</SignupInputTitle>\n                <SignupRadioWrapper>\n                  <SignupRadio\n                    type=\"radio\"\n                    id=\"SMSTrue\"\n                    value=\"true\"\n                    {...register(\"smsReception\")}\n                    checked\n                  />\n                  <SignupRadioTitle htmlFor=\"SMSTrue\">\n                    수신 허용\n                  </SignupRadioTitle>\n                </SignupRadioWrapper>\n                <SignupRadioWrapper>\n                  <SignupRadio\n                    type=\"radio\"\n                    id=\"SMSFalse\"\n                    value=\"false\"\n                    {...register(\"smsReception\")}\n                  />\n                  <SignupRadioTitle htmlFor=\"SMSFalse\">\n                    수신 거부\n                  </SignupRadioTitle>\n                </SignupRadioWrapper>\n              </SignupInputWrapper>\n              <Divider style={{ marginTop: \"16px\", marginBottom: \"54px\" }} />\n              <SignupBtnWrapper>\n                <SignupWhiteBtn\n                  onClick={() => {\n                    navigate(\"/\");\n                  }}\n                >\n                  취소\n                </SignupWhiteBtn>\n                <SignupBlueBtn type=\"submit\">다음</SignupBlueBtn>\n              </SignupBtnWrapper>\n            </form>\n          </>\n        )}\n        {step === 2 && (\n          <>\n            <SignupBigCheckWrapper>\n              <CheckImg\n                style={{ width: \"111px\", margin: \"0px\" }}\n                src={BigCheckSVG}\n              />\n              <SignupSuccessTitle>\n                금융 빅데이터 플랫폼 회원가입이 완료되었습니다.\n              </SignupSuccessTitle>\n              <SignupSuccessSubTitle>\n                가입해주셔서 감사합니다.\n              </SignupSuccessSubTitle>\n            </SignupBigCheckWrapper>\n            <SignupBtnWrapper>\n              <SignupWhiteBtn\n                onClick={() => {\n                  navigate(\"/\");\n                }}\n              >\n                메인화면\n              </SignupWhiteBtn>\n              <SignupBlueBtn\n                onClick={() => {\n                  navigate(\"/login\");\n                }}\n              >\n                로그인\n              </SignupBlueBtn>\n            </SignupBtnWrapper>\n          </>\n        )}\n      </SignupBodyWrapper>\n    </SignupWrapper>\n  );\n};\n\nexport default SignupPresenter;\n","import { gql } from \"@apollo/client\";\n\nexport const CREATE_USER = gql`\n  mutation createUser($input: createUserInput!) {\n    createUser(input: $input) {\n      user {\n        id\n        email\n        confirmed\n        blocked\n        role {\n          id\n          name\n          description\n          type\n        }\n      }\n    }\n  }\n`;\n\nexport const EMAIL_AUTH = gql`\n  mutation createEmailAuth($input: createEmailAuthInput) {\n    createEmailAuth(input: $input) {\n      emailAuth {\n        id\n        code\n      }\n    }\n  }\n`;\n\nexport const EMAIL_AUTH_CHECK = gql`\n  query emailAuths {\n    emailAuths {\n      id\n      code\n    }\n  }\n`;\n\nexport const DELETE_EMAIL_AUTH = gql`\n  mutation deleteEmailAuth($input: deleteEmailAuthInput) {\n    deleteEmailAuth(input: $input) {\n      emailAuth {\n        id\n        code\n      }\n    }\n  }\n`;\n\nexport const FETCH_USERS = gql`\n  query users($where: JSON) {\n    users(where: $where) {\n      id\n      email\n    }\n  }\n`;\n","import { useMutation, useQuery } from \"@apollo/client\";\nimport { useState } from \"react\";\nimport {\n  EmailAuth,\n  Mutation,\n  MutationCreateEmailAuthArgs,\n  MutationCreateUserArgs,\n  MutationDeleteEmailAuthArgs,\n} from \"../../commons/types/generated/types\";\nimport SignupPresenter from \"./Signup.presenter\";\nimport {\n  CREATE_USER,\n  DELETE_EMAIL_AUTH,\n  EMAIL_AUTH,\n  EMAIL_AUTH_CHECK,\n  FETCH_USERS,\n} from \"./Signup.query\";\n\nconst SignupContainer = () => {\n  //* 이용약관 동의 스테이트\n  const [checkInput, setCheckInput] = useState({\n    first: false,\n    second: false,\n  });\n  //* 동의하지 않을 때 에러\n  const [errorMsg, setErrorMsg] = useState(false);\n\n  //* 회원가입 절차\n  const [step, setStep] = useState(0);\n\n  //* 인증 상태\n  const [isAuth, setIsAuth] = useState({\n    isSend: false,\n    isOk: false,\n    isError: false,\n  });\n\n  //* 중복이름 확인\n  const [isCheckName, setIsCheckName] = useState(false);\n\n  //* 유저 생성 Mutation\n  const [createUser] = useMutation<Mutation, MutationCreateUserArgs>(\n    CREATE_USER\n  );\n\n  //* 이메일 인증 Mutation\n  const [emailAuth] = useMutation<Mutation, MutationCreateEmailAuthArgs>(\n    EMAIL_AUTH\n  );\n\n  //* 이메일 인증 후 데이터 삭제\n  const [deleteEmailAuth] = useMutation<Mutation, MutationDeleteEmailAuthArgs>(\n    DELETE_EMAIL_AUTH\n  );\n\n  //* 이메일 인증 코드 데이터\n  const { data, refetch } = useQuery(EMAIL_AUTH_CHECK);\n\n  //* 중복 이름 확인 쿼리\n  const { fetchMore } = useQuery(FETCH_USERS, {\n    variables: {\n      where: {\n        username: \"\",\n      },\n    },\n  });\n\n  //* 모든 약관 동의 함수\n  const handleAllCheck = () => {\n    if (checkInput.first && checkInput.second) {\n      setCheckInput({\n        ...checkInput,\n        first: false,\n        second: false,\n      });\n      return;\n    }\n    setCheckInput({\n      ...checkInput,\n      first: true,\n      second: true,\n    });\n  };\n\n  //* 다음 스탭으로 넘어가는 함수\n  const handleNextBtn = () => {\n    if (checkInput.first && checkInput.second) {\n      setErrorMsg(false);\n      setStep(() => step + 1);\n    } else {\n      setErrorMsg(true);\n    }\n  };\n\n  //* 유저 생성 함수\n  const handleCreateUser = async (data: any) => {\n    if (isAuth.isOk) {\n      try {\n        const emailReception = data.emailReception === \"true\" ? true : false;\n        const smsReception = data.smsReception === \"true\" ? true : false;\n        await createUser({\n          variables: {\n            input: {\n              data: {\n                email: data.email,\n                username: data.username,\n                password: data.password,\n                emailReception,\n                smsReception,\n                name: data.name,\n                phone: data.phone,\n              },\n            },\n          },\n        });\n        setStep(() => step + 1);\n      } catch (error) {\n        alert(\"오류가 발생했습니다.\");\n      }\n    } else {\n      alert(\"내용 입력 및 인증번호를 확인해주세요.\");\n    }\n  };\n\n  //* 인증번호 발송\n  const handleEmailAuth = async (email: string) => {\n    try {\n      await emailAuth({\n        variables: {\n          input: {\n            data: {\n              email: email,\n              code: \"\",\n              type: \"signup\",\n            },\n          },\n        },\n      });\n      alert(\"인증코드가 메일로 전송됐습니다.\");\n      setIsAuth({\n        ...isAuth,\n        isSend: true,\n      });\n      refetch();\n    } catch (error) {\n      alert(\"이미 가입된 이메일입니다.\");\n    }\n  };\n\n  //* 인증번호 확인\n  const handleEmailAuthCheck = async (auth: string) => {\n    let Auth: EmailAuth[] = data?.emailAuths.filter(\n      (data: any) => data.code === auth\n    );\n    if (Auth.length === 1) {\n      try {\n        setIsAuth({\n          ...isAuth,\n          isOk: true,\n          isError: false,\n        });\n        await deleteEmailAuth({\n          variables: {\n            input: {\n              where: {\n                id: Auth[0].id,\n              },\n            },\n          },\n        });\n      } catch (error) {\n        setIsAuth({\n          ...isAuth,\n          isError: true,\n        });\n      }\n    } else {\n      setIsAuth({\n        ...isAuth,\n        isError: true,\n      });\n    }\n  };\n\n  //* 유저 중복이름 확인\n  const checkUsername = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    try {\n      const checkUser = await fetchMore({\n        variables: {\n          where: {\n            username: e.target.value,\n          },\n        },\n      });\n      if (checkUser?.data?.users.length === 1) {\n        setIsCheckName(true);\n      } else {\n        setIsCheckName(false);\n      }\n    } catch (error) {}\n  };\n\n  return (\n    <SignupPresenter\n      checkInput={checkInput}\n      setCheckInput={setCheckInput}\n      handleAllCheck={handleAllCheck}\n      handleNextBtn={handleNextBtn}\n      errorMsg={errorMsg}\n      step={step}\n      handleCreateUser={handleCreateUser}\n      handleEmailAuth={handleEmailAuth}\n      isAuth={isAuth}\n      handleEmailAuthCheck={handleEmailAuthCheck}\n      checkUsername={checkUsername}\n      isCheckName={isCheckName}\n    />\n  );\n};\n\nexport default SignupContainer;\n","export default __webpack_public_path__ + \"static/media/info.547ba76b.svg\";","export default __webpack_public_path__ + \"static/media/checkGray.58d57499.svg\";","export default __webpack_public_path__ + \"static/media/checkColor.936a122f.svg\";"],"sourceRoot":""}